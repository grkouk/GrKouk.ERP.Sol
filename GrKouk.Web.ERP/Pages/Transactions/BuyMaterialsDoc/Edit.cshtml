@page
@model EditModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    Layout = "_LayoutEntryFormTransaction";
    ViewData["Title"] = "Μεταβολή Παραστατικού Αγοράς";
}

@section MyCss
{
    <!--Begin syncfusion integration-->
    <link rel="stylesheet" href="https://cdn.syncfusion.com/ej2/bootstrap4.css" />
    <!--End syncfusion integration-->
    <link rel="stylesheet" href="~/css/search-modal.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-select/css/bootstrap-select.min.css" />
}

<style>
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        margin: 0;
    }
    .ui-autocomplete-loading {
        background: white url('@Url.Content("~/images/ui-anim_basic_16x16.gif")') right center no-repeat;
    }
    .ui-autocomplete.ui-widget {
        font-family: Verdana,Arial,sans-serif;
        font-size: 12px;
    }
    .input-doc-line {
        font-size: 0.7rem;
    }
    .fill-height {
        line-height:2.8rem;
    }
</style>

<div class="container-xxl">
    <hr />
    <form method="post" id="transForm">
        <fieldset id="thisForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ItemVm.Id" />
            <input type="hidden" asp-for="ItemVm.FiscalPeriodId" />
            <input type="hidden" asp-for="ItemVm.BuyDocTypeId" />
            <input type="hidden" asp-for="ItemVm.SectionId" />
            <input type="hidden" asp-for="ItemVm.Timestamp" />
            <input type="hidden" asp-for="@Model.InitialLoad" id="IsInitialLoad" />
            <input type="hidden" id="MaterialId" />
            <input type="hidden" id="MaterialLastPrice" />
            <input type="hidden" id="MaterialFpaId" />
            <input type="hidden" id="MaterialMainUnitId" />
            <input type="hidden" id="MaterialMainUnitCode" />
            <input type="hidden" id="MaterialSecondaryUnitId" />
            <input type="hidden" id="TransactionUnitId" />
            <input type="hidden" id="TransactionUnitCode" />
            <input type="hidden" id="TransactionUnitType" />
            <input type="hidden" id="MaterialsCounter" />
            <input type="hidden" id="SeriesUsedPrice" />
            <input type="hidden" id="LineEditing" />
            <input type="hidden" id="LookupValueValid" />
            <div class="row mb-3">
                <div class="col-md-3 col-lg-2">
                    <div class="form-floating">
                        <input asp-for="ItemVm.TransDate" class="form-control form-control-sm" autofocus />
                        <label asp-for="ItemVm.TransDate" class="form-label small"></label>
                        <span asp-validation-for="ItemVm.TransDate" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6 col-lg-5">
                    <div class="form-floating">
                        <select asp-for="ItemVm.BuyDocSeriesId" class="form-select form-select-sm" asp-items="ViewBag.BuyDocSeriesId"></select>
                        <label asp-for="ItemVm.BuyDocSeriesId" class="form-label small"></label>
                    </div>
                </div>
                <div class="col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input asp-for="ItemVm.TransRefCode" class="form-control form-control-sm" placeholder="Ref Code" />
                        <label asp-for="ItemVm.TransRefCode" class="form-label small"></label>
                        <span asp-validation-for="ItemVm.TransRefCode" class="text-danger"></span>
                    </div>

                </div>
            </div>
            <div class="row mb-3 gx-1 align-items-center">
                <div class="col-md-6">
                    <div class="form-floating">
                        <select asp-for="ItemVm.TransactorId" class="form-select form-select-sm" asp-items="ViewBag.TransactorId"></select>
                        <label asp-for="ItemVm.TransactorId" class="form-label small"></label>

                    </div>
                </div>
                <div class="col-auto">
                    <button class="btn btn-outline-secondary fill-height" data-bs-toggle="modal"
                            data-bs-target="#itemSelector" data-selectorType="SuppliersSelector" type="button">
                        ...
                    </button>

                </div>
                <div class="col-md-2">
                    <div class="form-floating">

                        <select asp-for="ItemVm.CompanyId" class="form-select form-select-sm" asp-items="ViewBag.CompanyId"></select>
                        <label asp-for="ItemVm.CompanyId" class="form-label" small></label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <select asp-for="ItemVm.PaymentMethodId" class="form-select form-select-sm" asp-items="ViewBag.PaymentMethodId"></select>
                        <label asp-for="ItemVm.PaymentMethodId" class="form-label" small></label>
                    </div>
                </div>
            </div>

            <div class="row mb-3 gx-1  align-items-center">
                <div class="col-sm-3 col-md-2 col-lg-2 col-xl-1">
                    <div class="form-floating">
                        <select asp-for="SeekType" class="form-select form-select-sm input-doc-line" asp-items="ViewBag.SeekType"></select>
                        <label class="form-label small">Seek Type</label>
                    </div>
                </div>
                <div class="col-sm-4 col-md-3 col-lg-3 col-xl-3">
                    <div class="form-floating ">
                        <input class="form-control form-control-sm input-doc-line" id="Lookup" autocomplete="off" placeholder="Lookup" />
                        <label class="form-label small">LookUp</label>

                    </div>
                </div>
                <div class="col-auto fill-height">
                    <button class="btn btn-outline-secondary btn-sm input-doc-line fill-height" data-bs-toggle="modal"
                            data-bs-target="#itemSelector" data-selectorType="ProductsSelector"
                            type="button">
                        ...
                    </button>
                </div>
                <div class="col-sm-3 col-md-2 col-lg-2 col-xl-2">
                    <div class="form-floating">
                        <select class="form-select form-select-sm input-doc-line" id="prodUnitSelector"></select>
                        <label class="form-label small">Unit</label>
                    </div>
                </div>
                <div class="col-sm-3 col-md-1 col-lg-1 col-xl-1">
                    <div class="form-floating">
                        <input class="form-control form-control-sm small input-doc-line text-end" type="number" placeholder="Quantity" id="transQuantity" />
                        <label class="form-label small" id="transQLabel">Quantity</label>
                    </div>
                    <div class="invalid-feedback">
                        Please enter a valid Quantity.
                    </div>
                </div>
                <div class="col-sm-3 col-md-1 col-lg-1 col-xl-1">
                    <ejs-numerictextbox id="PriceOnTransUnit" placeholder="Price" format="c2" showSpinButton="false" floatLabelType="Auto"></ejs-numerictextbox>
                                     
                   <div class="invalid-feedback">
                       Please enter a valid Price.
                   </div>
                </div>
                <div class="col-sm-3 col-md-1 col-lg-1 col-xl-1">
                    <ejs-numerictextbox id="DiscountPercent" placeholder="Dis %" format="p2" showSpinButton="false" floatLabelType="Auto"></ejs-numerictextbox>
                                      
                   <div class="invalid-feedback">
                       Please enter a valid Discount.
                   </div>
                </div>
                <div class="col-sm-3 col-md-1 col-lg-1 col-xl-1">
                    <ejs-numerictextbox id="VatPercent" placeholder="Vat %" format="p2" showSpinButton="false" floatLabelType="Auto"></ejs-numerictextbox>
                                      
                   <div class="invalid-feedback">
                       Please enter a valid VAT.
                   </div>
                </div>
                <div class="col-sm-1">
                    <button id="addToList" class="btn btn-primary btn-sm">
                        <i class="far fa-arrow-alt-circle-down"></i>
                    </button>
                </div>
            </div>
            <div class="row mb-3">
                <div class="form-group col-sm-1">
                    <label class="small" id="q1Label">Q1</label>
                    <input class="form-control form-control-sm small input-doc-line text-end" type="text" placeholder="Q 1" id="Q1" tabindex="-1" readonly />
                    <div class="invalid-feedback">
                        Please enter a valid Q1.
                    </div>
                </div>
                <div class="form-group col-sm-1">
                    <label class="small" id="q2Label">Q2</label>
                    <input class="form-control form-control-sm small input-doc-line text-end" type="text" placeholder="Q 2" id="Q2" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">Unit Factor</label>
                    <input class="form-control form-control-sm input-doc-line text-end" type="text" placeholder="Base Factor" id="MaterialFactor" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">Trans Factor</label>
                    <input class="form-control form-control-sm input-doc-line text-end" type="text" placeholder="Trans Factor" id="TransactionUnitFactor" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">Price Base</label>
                    <input class="form-control form-control-sm input-doc-line text-end" type="text" placeholder="Price" id="Price" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">Price Net</label>
                    <input class="form-control form-control-sm input-doc-line text-end" type="text" type="number" placeholder="Price Net" id="PriceNet" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">VAT</label>
                    <input class="form-control form-control-sm input-doc-line text-end currency-input" type="text" placeholder="Vat Value" id="LineVatValue" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">Discount</label>
                    <input class="form-control form-control-sm input-doc-line text-end currency-input" type="text" placeholder="Disc Value" id="LineDiscValue" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">Netto</label>
                    <input class="form-control form-control-sm input-doc-line text-end currency-input" type="text" placeholder="Net Value" id="LineNetValue" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">Bruto</label>
                    <input class="form-control form-control-sm input-doc-line text-end currency-input" type="text" placeholder="Brut Value" id="LineBrutValue" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
                <div class="form-group col-md-1">
                    <label class="small">Expenses</label>
                    <input class="form-control form-control-sm input-doc-line text-end currency-input" type="text" placeholder="Exp Value" id="LineExpValue" tabindex="-1" readonly />
                    <span class="text-danger small"></span>
                </div>
            </div>
            <div class="row mb-3 ps-2 pe-2">
                <table id="detailsTable" class="table table-responsive-sm">
                    <thead class="small">
                        <tr>
                            <th class="small" style="width: 0%"> #</th>
                            <th class="small" style="width: 20%">Product</th>
                            <th class="small text-center" style="width: 10%">Q(Trans)</th>
                            <th class="small text-center" style="width: 10%">Q(Base)</th>
                            <th class="small text-center" style="width: 10%">Trans Price</th>
                            <th class="small text-center" style="width: 5%">Disc%</th>
                            <th class="small text-center" style="width: 5%">Vat%</th>
                            <th class="small text-center" style="width: 10%">Net</th>
                            <th class="small text-center" style="width: 10%">Disc</th>
                            <th class="small text-center" style="width: 10%">Vat</th>
                            <th class="small text-center" style="width: 10%">Gross</th>
                            <th class="small" style="width: 1%"></th>
                            <th class="small" style="width: 1%"></th>

                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var lineCount = 0;

                            foreach (var docLine in Model.ItemVm.BuyDocLines)
                            {
                                lineCount++;
                                var materialId = docLine.WarehouseItemId;
                                var transUnitId = docLine.TransactionUnitId;
                                var transQuantity = docLine.TransactionQuantity;
                                var transQuantityActual = FormattableString.Invariant($"{transQuantity}");
                                var transUnitFactor = docLine.TransactionUnitFactor;
                                var q1 = docLine.Quontity1;
                                var q2 = docLine.Quontity2;

                                var transPrice = docLine.TransUnitPrice;
                                var unitPrice = docLine.UnitPrice;
                                var vatRate = docLine.FpaRate;
                                var mainUnitId = docLine.PrimaryUnitId;
                                var secUnitId = docLine.SecondaryUnitId;
                                var factor = docLine.Factor;
                                var materialName = docLine.WarehouseItemName;
                                var disRate = docLine.DiscountRate;
                                var disAmount = docLine.AmountDiscount;
                                var vatAmount = docLine.AmountFpa;
                                var netAmount = docLine.AmountNet;
                                var grosAmount = netAmount - disAmount + vatAmount;
                                var q1Actual = FormattableString.Invariant($"{q1}");
                                var q2Actual = FormattableString.Invariant($"{q2}");
                                var unitPriceActual = FormattableString.Invariant($"{unitPrice}");
                                var vatRateActual = FormattableString.Invariant($"{vatRate}");
                                //var vatRateActual = vatRate;
                                var factorActual = FormattableString.Invariant($"{factor}");
                                var disRateActual = FormattableString.Invariant($"{disRate}");
                                //var disRateActual = disRate;
                                var disAmountActual = FormattableString.Invariant($"{disAmount}");
                                var vatAmountActual = FormattableString.Invariant($"{vatAmount}");
                                var netAmountActual = FormattableString.Invariant($"{netAmount}");
                                var grosAmountActual = FormattableString.Invariant($"{grosAmount}");
                                var transPriceActual = FormattableString.Invariant($"{transPrice}");
                                //var transPriceActual = transPrice;
                                var transUnitFactorActual = FormattableString.Invariant($"{transUnitFactor}");
                                var transQuantityText = $@"{transQuantity:N2}";
                                var q1Text = $@"{q1:N2}";
                                var tLine = $"<tr><td class=\"small\"> {lineCount}" +
                                            $"</td><td class=\"small\" data-materialId=\"{materialId}\" " +
                                            $"data-transUnitId=\"{transUnitId}\" data-transUnitFactor=\"{transUnitFactor}\" " +
                                            $"data-Q2=\"{q2Actual}\"  " +
                                            $"data-baseUnitPriceNet=\"{unitPriceActual}\"  " +
                                            $"data-factor=\"{factorActual}\" data-mainUnitId=\"{mainUnitId}\" data-secUnitId=\"{secUnitId}\" " +
                                            $">{materialName} </td><td class=\"small text-end\"  data-actualValue=\"{transQuantityActual}\" >" +
                                            $" {transQuantityText} </td><td class=\"small text-end\"  data-actualValue=\"{q1Actual}\" > " +
                                            $" {q1Text} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{transPriceActual}\" >" +
                                            $" {transPrice} </td><td class=\"small text-end\"  data-actualValue=\"{disRateActual}\" >" +
                                            $"{disRate} </td><td class=\"small text-end\"  data-actualValue=\"{vatRateActual}\" >" +
                                            $"{vatRate} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{netAmountActual}\" >" +
                                            $"{netAmount} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{disAmountActual}\" >" +
                                            $"{disAmount} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{vatAmountActual}\" >" +
                                            $"{vatAmount} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{grosAmountActual}\" >" +
                                            $"{grosAmount} </td>" +
                                            $"<td class=\"small\">" +
                                            $"<a data-itemId=\"0\" href=\"#\" class=\"modifyItem\"><i class=\"fas fa-edit\"></i></a></td>" +
                                            $"<td class=\"small\">" +
                                            $"<a data-itemId=\"0\" href=\"#\" class=\"deleteItem\"><i class=\"fas fa-trash\"></i></a></td></tr>";
                                @Html.Raw(tLine)
                                ;
                            }

                        }
                    </tbody>
                </table>
            </div>
            <div class="row mb-3">
                <div class="col-3">
                    <label class=" small">Net Amount</label>
                    <input asp-for="ItemVm.AmountNet" class="form-control form-control-sm small text-end currency-input" type="text" disabled />
                    <span asp-validation-for="ItemVm.AmountNet" class="text-danger small"></span>
                </div>


                <div class="col-3">
                    <label class=" small">Discount</label>
                    <input asp-for="ItemVm.AmountDiscount" class="form-control form-control-sm small text-end currency-input" type="text" disabled />
                    <span asp-validation-for="ItemVm.AmountDiscount" class="text-danger small"></span>
                </div>
                <div class="col-3">
                    <label class="small">Amount VAT</label>
                    <input asp-for="ItemVm.AmountFpa" class="form-control form-control-sm small text-end currency-input" type="text" disabled />
                    <span asp-validation-for="ItemVm.AmountFpa" class="text-danger small"></span>
                </div>
                <div class="col-3">
                    <label class=" small">Sum</label>
                    <input id="DocumentSum" type="text" class="form-control form-control-sm small text-end currency-input" disabled />

                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-floating">
                        <textarea asp-for="ItemVm.Etiology" class="form-control form-control-sm small"></textarea>
                        <label asp-for="ItemVm.Etiology" class="form-label small"></label>
                    </div>
                    <span asp-validation-for="ItemVm.Etiology" class="text-danger small"></span>
                </div>
            </div>
            <div>
                <input type="submit" value="Update" class="btn btn-primary btn-sm" id="saveForm" />
            </div>
        </fieldset>
    </form>
</div>

<!-- Modal Image Viewer -->
<div class="modal fade" id="imageViewer" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-center">
                <img id="imageControl" src="" style="height:400px;width:400px;" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>
<partial name="_LoadMePartial" />
<partial name="_ItemSelector" />

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsStrippedPartial"); }
    <script src="~/lib/bootstrap-select/js/bootstrap-select.min.js"></script>
    <script src="~/lib/jqueryui/jquery-ui.min.js"></script>
    <script src="~/js/jquery.ui.autocomplete.scroll.min.js"></script>
    <!--Begin syncfusion integration-->
    <script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js"></script>
    <ejs-scripts></ejs-scripts>
    <!--End syncfusion integration-->
    <!-- Begin For Modal selector -->
    <script src="~/js/definitions.js"></script>
    <script src="~/js/indexPageIIFE.lib.js"></script>
    <script src="~/js/selectors.lib.js"></script>
    <script src="~/js/product.lib.js"></script>
    <!-- End For Modal selector -->
    <script>
        $(document).ready(function() {
            console.log("Inside Document ready");
            $('#LineEditing').val(0);
            // var currentCulture = '@System.Globalization.CultureInfo.CurrentCulture';
            // console.log('Current Culture ' + currentCulture);
            // var parseNumber ;
            // var formatterCurrency = new Intl.NumberFormat(currentCulture,
            //     {
            //         style: 'currency',
            //         currency: 'EUR',
            //         minimumFractionDigits: 2
            //     });
            // var formatterNumber = new Intl.NumberFormat(currentCulture,
            //     {
            //         maximumFractionDigits: 3
            //
            //     });
            //#region variables
            var $initialLoad = $('#IsInitialLoad');
            var $transDate = $('#ItemVm_TransDate');
            var securityToken = $('[name=__RequestVerificationToken]').val();

            var $lookUp = $('#Lookup');
            var $q1 = $('#Q1');
            var $q2 = $('#Q2');
            var $materialCounter = $('#MaterialsCounter');
            var $lineEditing = $('#LineEditing');
            var $amountNet = $('#ItemVm_AmountNet');
            var $amountFpa = $('#ItemVm_AmountFpa');
            var $amountDiscount = $('#ItemVm_AmountDiscount');
            var $amountSum = $('#DocumentSum');
            var $q1Label = $('#q1Label');
            var $q2Label = $('#q2Label');
            var $discount = $("#Discount");
            var $materialId = $('#MaterialId');
            var $vatPercent = $('#VatPercent');
            var $factor = $('#MaterialFactor');
            var $mainUnitId = $('#MaterialMainUnitId');
            var $secUnitId = $('#MaterialSecondaryUnitId');
            var $seekType = $('#SeekType');

            var $priceNetto = $('#MaterialNettoPrice');
            var $priceBrutto = $('#MaterialBruttoPrice');
            var $seriesUsedPrice = $('#SeriesUsedPrice');
            var $priceLabel = $('#priceLabel');
            var $transDocSeriesId = $('#ItemVm_BuyDocSeriesId');
            var $companyId = $('#ItemVm_CompanyId');
            var $price = $("#Price");
            var $priceNet = $("#PriceNet");
            var $lookupValueValid = $("#LookupValueValid");
            var $materialFpaId = $('#MaterialFpaId');
            var $transUnitId = $('#TransactionUnitId');
            var $transUnitType = $('#TransactionUnitType');
            var $transUnitFactor = $('#TransactionUnitFactor');
            var $transQuantity = $('#transQuantity');
            var $transUnitSelector = $('#prodUnitSelector');
            var $transPrice = $('#PriceOnTransUnit');

            var $lineNetValue = $('#LineNetValue');
            var $lineVatValue = $('#LineVatValue');
            var $lineDiscValue = $('#LineDiscValue');
            var $lineBrutValue = $('#LineBrutValue');
            var $lineExpValue = $('#LineExpValue');
            var $mainUnitCode = $('#MaterialMainUnitCode');
            var $transUnitCode = $('#TransactionUnitCode');
            var $docCurrency = $('[name=docCurrency]');
            var discountPercentEl = document.getElementById("DiscountPercent").ej2_instances[0];
            var vatPercentEl = document.getElementById("VatPercent").ej2_instances[0];
            var transQuantityEl = document.getElementById("transQuantity").ej2_instances[0];
            var priceOnTransUnitEl = document.getElementById("PriceOnTransUnit").ej2_instances[0];
            //#endregion
         //#region items selectors modals
            $.fn.selectpicker.Constructor.BootstrapVersion = '4';
            selectorsLib.initializeSelector();
            $('#imageViewer').on('show.bs.modal',
                function(event) {
                    var button = $(event.relatedTarget);
                    var imageUrl = button.data('imageurl');
                    var $modal = $(this);
                    $modal.find('.modal-title').text('Image');
                    $modal.find('#imageControl').attr("src", imageUrl);

                });
            $('#itemSelector').on('shown.bs.modal',
                function() {

                    selectorsLib.updateFilterControls();
                    $('[name=itemsSearchText]').trigger('focus');
                    return;

                });
            $('#itemSelector').on('show.bs.modal',
                function(event) {
                    var button = $(event.relatedTarget);
                    var selectorType = button.data('selectortype');
                    //var modal = $(this);
                    switch (selectorType) {
                        case "ProductsSelector":
                            selectorsLib.showProductSelector(handleProductSelection);

                            break;
                        case "SuppliersSelector":
                            selectorsLib.showSupplierSelector();

                            break;
                        default:
                    }
                });
            //#endregion
            const priceChanged = () => {
                let transPrice = priceOnTransUnitEl.value;
                if (isNaN(transPrice)) {
                    transPrice = 0;
                }
                let transUnitFactorAttr = $transUnitFactor.attr('data-actualValue');
                var transFactor = parseFloat(transUnitFactorAttr);
                if (isNaN(transFactor)) {
                    transFactor = 1;
                }
                var priceNetValue = 0;
                var vatPerc = vatPercentEl.value;
                
                if (isNaN(vatPerc)) {
                    vatPerc = 0;
                }
                var priceOnBaseUnit = transPrice / transFactor;
                var priceType = $seriesUsedPrice.val();
                switch (priceType) {
                case '1':
                    priceNetValue = priceOnBaseUnit;
                    $priceNet.val(priceNetValue);
                    $price.val(priceOnBaseUnit);

                    break;
                case '2':
                    if (vatPerc != 0) {
                        //priceNetValue = (priceOnBaseUnit / (1 + vatPerc)).toFixed(2);
                        priceNetValue = priceOnBaseUnit / (1 + vatPerc);
                    } else {
                        priceNetValue = priceOnBaseUnit;
                    }
                    $priceNet.val(priceNetValue);
                    $price.val(priceOnBaseUnit);
                    break;
                default:
                    break;
                }

                //ToDo Rounding???
                var baseQuantity = parseFloat($q1.val());
                if (isNaN(baseQuantity)) {
                    baseQuantity = 0;
                }
                var netVal = priceNetValue * baseQuantity;
                var discPercent =discountPercentEl.value;
               
                if (isNaN(discPercent)) {
                    discPercent = 0;
                }
                var discVal = netVal * discPercent;
                var netDiscountedVal = netVal - discVal;
                var vatVal = netDiscountedVal * vatPerc;
                var brutVal = netDiscountedVal + vatVal;
                var netValText = formatterCurrency.format(netVal);
                var discValText = formatterCurrency.format(discVal);
                var vatValText = formatterCurrency.format(vatVal);
                var brutValText = formatterCurrency.format(brutVal);
                $lineNetValue.val(netValText);
                $lineNetValue.attr('data-actualValue',netVal);
                $lineDiscValue.val(discValText);
                $lineDiscValue.attr('data-actualValue', discVal);
                $lineVatValue.val(vatValText);
                $lineVatValue.attr('data-actualValue', vatVal);
                $lineBrutValue.val(brutValText);
                $lineBrutValue.attr('data-actualValue', brutVal);

            };
            const transQuantityChanged = () => {
                let trQ = transQuantityEl.value;
                if (isNaN(trQ)) {
                    return;
                }
                let trFactor = parseFloat($transUnitFactor.val());
                if (isNaN(trFactor)) {
                    return;
                }
                let q1 = trQ * trFactor;
                let secFactor = parseFloat($factor.val());
                if (isNaN(secFactor)) {
                    return;
                }
                let q2 = q1 / secFactor;

                $q1.val(q1);
                $q2.val(q2);
                priceChanged();
            };
            var lineUpdatePrice = (linePrice, lineFpaRate) => {
                var priceNetValue = parseFloat( linePrice);
                var fpaValue = parseFloat(lineFpaRate);
                var priceValue = 0;

                if (fpaValue != 0) {
                    priceValue = priceNetValue * (1 + fpaValue);
                } else {
                    priceValue = priceNetValue;
                }
                var priceType = $seriesUsedPrice.val();
                switch (priceType) {
                case '1'://Netto
                        $priceNet.val(priceNetValue);
                        $price.val(priceNetValue);
                    break;
                case '2'://Brutto
                        $priceNet.val(priceNetValue);
                        $price.val(priceValue);
                    break;
                default:
                    break;
                }
            };
             const setupEventManagers = () => {
                vatPercentEl.addEventListener("change",(event) => {
                    priceChanged();
                });
                discountPercentEl.addEventListener("change", (event) => {
                    priceChanged();
                });
                priceOnTransUnitEl.addEventListener("change", (event) => {
                    priceChanged();
                });
                transQuantityEl.addEventListener("change", (event) => {
                    transQuantityChanged();
                });
            };
            var setSeriesInSession = () => {
                return $.ajax({
                    contentType: 'application/json; charset=utf-8',

                    dataType: 'json',
                    type: 'GET',
                    url: "/api/Materials/SetBuySeriesInSession?seriesId="+$transDocSeriesId.val(),

                    success: function(result) {

                    },
                    error: function(e) {

                    }
                });
            };
            const formatCurrencyLineValueElements = () => {
                let $elementsToUpdateVal = $('.currency-input');
                $elementsToUpdateVal.each(function() {
                    let $el = $(this);
                    let elValue = $el.attr('data-actualValue');
                    if (!isNaN(elValue)) {
                        $el.val(formatterCurrency.format(elValue));
                    } 

                });
            };
            const formatCurrencyTableElements = () => {
                let $elementsToUpdateText = $('.currency-input-text');
                $elementsToUpdateText.each(function () {
                    let $el = $(this);
                    let elValue = $el.attr('data-actualValue');
                    if (!isNaN(elValue)) {
                        $el.text(formatterCurrency.format(elValue));
                    }

                });
            };
            const updateCurrencyFormat = () => {
                formatCurrencyLineValueElements();
                formatCurrencyTableElements();
            };
            
            const companyChanged = () => {
                let companyId = parseInt($companyId.val());
                if (isNaN(companyId)) {
                    companyId = 0;
                }
                if (companyId > 0) {
                    productLib.setCompanyIdInSession(companyId)
                        .then()
                        .catch((error) => {
                            console.log("Error setting companyId in session ");
                            console.log(error);
                        });
                    productLib.getCompanyBaseCurrencyInfo(companyId)
                        .then((data) => {
                            let currencyCode = data.currencyCode;
                           let locale = data.currencyLocale.substring(0, 2);
                           let loader = ej.base.loadCldr;
                           productLib.setLanguageLocale(locale, currencyCode, loader)
                               .then(() => {
                                   ej.base.setCulture(locale);
                                   ej.base.setCurrencyCode(currencyCode);
                                   
                                    parseNumber = Globalize.numberParser();
                                   formatNumber = Globalize.numberFormatter();
                                   formatCurrency = Globalize.currencyFormatter(currencyCode);
                                   productLib.setParsers(parseNumber);
                                   productLib.setFormatters(formatNumber, formatCurrency);
                                   $docCurrency.text(currencyCode);
                                   updateCurrencyFormat();
                                })
                               .catch((error) => {
                                   console.log("Error setting Globalize locale");
                                   console.log(error);
                                   toastr.error(error.statusText, "Error");
                               });
                        })
                        .catch((error) => {
                            console.log("Error getting company base currency");
                            console.log(error);
                            toastr.error(error.statusText, "Error");
                        });
                }
            };
            const transactorChanged = () => {
                const $transactorId = $('#ItemVm_TransactorId');

                //sessionStorage.setItem('CompanyId', $companyId.val());
                // console.log('transactorChanged transactorId=' + $transactorId.val());
                return $.ajax({
                    contentType: 'application/json; charset=utf-8',

                    dataType: 'json',
                    type: 'GET',
                    url: "/api/Materials/SetTransactorInSession?transactorId=" + $transactorId.val(),

                    success: function (result) {

                    },
                    error: function (e) {

                    }
                });
            };
            const seriesChanged = () => {
                //console.log("Inside Series Changed");
                setSeriesInSession();
                var seriesId = $transDocSeriesId.val();

                var finalUri = `/api/materials/BuySeriesData?seriesId=${seriesId}`;
                fetch(finalUri)
                    .then(function (response) {
                        if (response.ok) {
                            return response.json();
                        } else {
                            return "-1";
                        }

                    })
                    .then(function (myJson) {
                        // console.log("Inside fetch then with myJson" + JSON.stringify(myJson));
                        if (myJson) {

                            var usedPrice = myJson.usedPrice;
                            // console.log("Returned usedPrice=" + usedPrice);
                            $seriesUsedPrice.val(usedPrice);
                            priceChanged();

                        }
                        // $spinner.attr('hidden', true);
                    })
                    .catch((error) => {
                        // $spinner.attr('hidden', true);
                        console.log(error);
                        toastr.error(error.statusText, "Error");
                    }
                    );
            };



            var setupUnitToUse = (e) => {
                switch (e) {
                    case 'MAIN':
                        $q1.prop('disabled', false);
                        $q2.prop('disabled' , true);
                        break;
                    case 'SEC':
                        $q1.prop('disabled', true);
                        $q2.prop('disabled' , false);
                        break;
                    case 'BUY':
                        $q1.prop('disabled', true);
                        $q2.prop('disabled' , false);
                        break;

                    default:
                        $q1.prop('disabled', false);
                        $q2.prop('disabled', false);
                        break;
                }
            };
            var initValUnitToUse = (e) => {
                switch (e) {
                    case 'MAIN':
                        $q1.val(1);
                        q1Changed();
                        $q1.focus();
                        break;
                    case 'SEC':
                        $q2.val(1);
                        q2Changed();
                        $q2.focus();
                        break;
                    case 'BUY':
                        $q2.val(1);
                        q2Changed();
                        $q2.focus();
                        break;

                    default:
                        $q1.val(1);
                        q1Changed();
                        break;
                }
            };
            var seekBarcode = () => {
                return $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'GET',
                    url: "/api/WarehouseItems/SeekBarcode?barcode="+$lookUp.val(),

                    success: function(result) {

                        var r = result;
                        console.log(r);
                        var mName = r.name;
                        var mFactor = r.factor;
                        var mId = r.id;
                        var rate = r.fpaRate;
                        var lastPrice = r.lastPrice;
                        var fpaId = r.fpaId;
                        var unitToUse = r.unitToUse;
                        setupUnitToUse(unitToUse);
                        $mainUnitId.val(r.mainUnitId);
                        $secUnitId.val(r.buyUnitId);
                        $materialId.val(mId);
                        $factor.val(mFactor);
                        vatPercentEl.value = rate;
                        discountPercentEl.value = 0;
                       
                        $materialFpaId.val(fpaId);
                        $price.val(lastPrice);
                        $priceNet.val(lastPrice);
                        $lookUp.val(mName);
                        initValUnitToUse(unitToUse);
                        $lookupValueValid.val('OK');
                    },
                    error: function(e) {
                        $lookupValueValid.val('ERROR');
                        //toastr.error("Error", "Error");
                    }
                });
            };
            var updateCounter = () => {
                var lineCounter = 0;
                var sumNet = 0;
                var sumVat = 0;
                var sumDisc = 0;
                var sumGross = 0;

                $.each($('#detailsTable tbody tr'),
                    function() {
                        lineCounter++;
                        $(this).find('td:eq(0)').text(lineCounter);
                        var lineNet = $(this).find('td:eq(7)').attr('data-actualValue');
                        var lineDisc = $(this).find('td:eq(8)').attr('data-actualValue');
                        var lineVat = $(this).find('td:eq(9)').attr('data-actualValue');
                        var lineGross = $(this).find('td:eq(10)').attr('data-actualValue');
                        sumNet += parseFloat(lineNet);
                        sumDisc += parseFloat(lineDisc);
                        sumVat += parseFloat(lineVat);
                        sumGross += parseFloat(lineGross);
                    });
                $amountNet.val(formatterCurrency.format(sumNet));
                $amountNet.attr('data-actualValue', sumNet);
                $amountFpa.val(formatterCurrency.format(sumVat));
                $amountFpa.attr('data-actualValue', sumVat);
                $amountDiscount.val(formatterCurrency.format(sumDisc));
                $amountDiscount.attr('data-actualValue', sumDisc);
                $amountSum.val(formatterCurrency.format(sumGross));
                $amountSum.attr('data-actualValue', sumGross);
            };
            const getUnitTypeName = (unitType) => {
                let unitTypeName = "";

                switch (unitType) {
                    case definitionsLib.UnitTypesEnum.BaseUnitType:
                        unitTypeName = "Base";
                        break;
                    case definitionsLib.UnitTypesEnum.SecondaryUnitType:
                        unitTypeName = "Secondary";
                        break;
                    case definitionsLib.UnitTypesEnum.BuyUnitType:
                        unitTypeName = "Buy";
                        break;
                    default:
                        break;
                }
                return unitTypeName;
            };
            const loadUnitList = (units, unitToSelectId) => {
                $transUnitSelector.empty();
                if (units) {
                    let defaultUnit;
                    let unitToSelect;
                    units.forEach(function (item) {
                        //definitionsLib.UnitTypesEnum.valueAsString()
                        let typeName = getUnitTypeName(item.unitType);
                        let isDefault = item.isDefault;
                        if (item.unitType === definitionsLib.UnitTypesEnum.SecondaryUnitType) {
                            $factor.val(item.unitFactor);
                        }
                        if (unitToSelectId) {
                            let toSelectId = parseInt(unitToSelectId);
                            if (item.unitId === toSelectId) {
                                unitToSelect = {
                                    unitId: item.unitId,
                                    unitType: item.unitType,
                                    unitCode: item.unitCode,
                                    unitFactor: item.unitFactor
                                };
                            }
                        }
                        if (isDefault) {
                            defaultUnit = {
                                unitId: item.unitId,
                                unitType: item.unitType,
                                unitCode: item.unitCode,
                                unitFactor: item.unitFactor
                            };
                        }
                        let unitText = `${typeName}-${item.unitCode}`;
                        $transUnitSelector.append($('<option></option>')
                            .attr('value', item.unitId)
                            .attr("unitcode", item.unitCode)
                            .attr("unitfactor", item.unitFactor)
                            .attr("unittype", item.unitType)
                            .text(unitText)
                        );

                    });
                    if (unitToSelectId) {
                        $transUnitSelector.val(unitToSelect.unitId);
                        $transUnitId.val(unitToSelect.unitId);
                        $transUnitCode.val(unitToSelect.unitCode);
                        $transUnitType.val(unitToSelect.unitType);
                        $transUnitFactor.val(unitToSelect.unitFactor);
                    } else {
                        if (defaultUnit) {
                            $transUnitSelector.val(defaultUnit.unitId);
                            $transUnitId.val(defaultUnit.unitId);
                            $transUnitCode.val(defaultUnit.unitCode);
                            $transUnitType.val(defaultUnit.unitType);
                            $transUnitFactor.val(defaultUnit.unitFactor);

                        }
                    }


                }
            };

            var handleProductSelection = (itemId, itemName) => {
                const $transactorId = $('#ItemVm_TransactorId');
                productLib.getProductItemInfo(itemId, $transactorId.val(), $companyId.val())
                    .then((data) => {
                        $materialId.val(itemId);
                        var rate = data.fpaRate;
                        var lastPrice = data.lastPrice;
                        var fpaId = data.fpaId;
                        
                        vatPercentEl.value = rate;
                        $('#MaterialFpaId').val(fpaId);
                        $price.val(lastPrice);
                        $priceNet.val(lastPrice);
                        discountPercentEl.value = 0;
                        
                        $lookUp.val(data.warehouseItemName);
                        $mainUnitId.val(data.mainUnitId);
                        $mainUnitCode.val(data.mainUnitCode);
                        $secUnitId.val(data.secondaryUnitId);
                        $factor.val(data.secondaryFactor);
                        let units = data.productUnits;
                        loadUnitList(units);
                        $lookupValueValid.val('OK');
                    })
                    .catch((error) => {
                        $lookupValueValid.val('ERROR');
                        console.log(error);
                    });
            };
            const getProductInfo = (itemId, transactorId, companyId, unitToSelectId) => {
                return new Promise((resolve, reject) => {
                    productLib.getProductItemInfo(itemId, transactorId, companyId)
                        .then((data) => {
                            let units = data.productUnits;
                            loadUnitList(units, unitToSelectId);
                            resolve(units);

                        })
                        .catch((error) => {
                            reject(error);

                        });
                });

            };


            var autoCompleteNameDef = {
                 source: '/api/materials/SearchWarehouseItemsForBuy',
                minLength: 2,
                maxShowItems:10,
                select: function(event, ui) {
                    $materialId.val(ui.item.value);
                    this.value = ui.item.label;
                    //Get WarehouseItem data
                    handleProductSelection(ui.item.value, ui.item.label);
                    return false;
                 }

            };
            var autoCompleteSupplierCodeDef = {
                source: '/api/materials/AutoCompleteProductsBySupplierCode',
                minLength: 2,
                maxShowItems: 10,
                select: function (event, ui) {
                    this.value = ui.item.label;
                    handleProductSelection(ui.item.value, ui.item.label);
                    return false;
                }

            };
            var setSeekType = () => {
                $lookUp.off('change');
                try {
                    $lookUp.autocomplete("destroy");
                } catch (e) {
                    console.log('Error in autocomplete destroy.');
                }

                var sType = $seekType.val();
                switch (sType) {
                case 'NAME':
                    $q1.prop('disabled', false);
                    $q2.prop('disabled' , false);
                    $lookUp.autocomplete(autoCompleteNameDef);
                    break;
                case 'CODE':
                    break;
                case 'BARCODE':
                    $lookUp.change(() => {
                        seekBarcode();
                    });
                    break;
                default:
                }
            };
          
            $transUnitSelector.change((event) => {
                //console.log("Inside unitSelector change event");
                // console.log(event);
                var $sel = $('#prodUnitSelector option:selected');
                var unitId = $sel.val();
                var unitCode = $sel.attr("unitcode");
                var unitFactor = $sel.attr("unitfactor");
                var unitType = $sel.attr("unittype");
                $transUnitFactor.val(unitFactor);
                $transUnitType.val(unitType);
                $transUnitCode.val(unitCode);
                $transUnitId.val(unitId);
                transQuantityChanged();

            });
           
            $seekType.change(() => {
                setSeekType();
            });
           
            $companyId.change(() => {
                companyChanged();
            });

            $transDocSeriesId.change(() => {
                seriesChanged();
            });
            $('#ItemVm_TransactorId').change(() => {
                //console.log("Transactor change event ->" + $('#ItemVm_TransactorId').val());
                transactorChanged();
            });

            $('#addToList').click((e) => {
                e.preventDefault();
                if ($lookupValueValid.val() != 'OK') {
                    toastr.error('Lookup value not correct');
                    return;
                }
                if ($.trim($lookUp.val()) == "" ||
                    $.trim($price.val()) == "" ||
                    $.trim($q1.val()) == "") {
                    toastr.error('Line not correct');
                    return;
                }
                var productName = $lookUp.val();
                var baseUnitPriceNet = parseFloat($priceNet.val());
                var baseUnitPrice =  parseFloat($price.val());
                var quantity1 = $q1.val();
                var quantity2 = $q2.val();
                var discount = discountPercentEl.value;
                var vatPercent = vatPercentEl.value;
                var transQuantity = transQuantityEl.value;
                var priceOnTransUnit = priceOnTransUnitEl.value;
                
                var materialId = $materialId.val();
                
                var factor = $factor.val();
                var mainUnitId = $mainUnitId.val();
                var secUnitId = $secUnitId.val();
                var materialCounter = parseInt($materialCounter.val()) + 1;
                var netAmount = parseFloat($lineNetValue.attr('data-actualValue'));
                var discountAmount = parseFloat($lineDiscValue.attr('data-actualValue'));
                var lineEdit = $lineEditing.val();
                var fpaAmount = parseFloat($lineVatValue.attr('data-actualValue'));
                var grosAmount = parseFloat($lineBrutValue.attr('data-actualValue'));
                var transUnitId = $transUnitId.val();
                var transUnitType = $transUnitType.val();
                var transUnitFactor = $transUnitFactor.val();
                
                var transUnitCode = $transUnitCode.val();
                var mainUnitCode = $mainUnitCode.val();
                
                var transUnitText = `${formatterNumber.format(transQuantity)} ${transUnitCode}`;
                var mainUnitText = `${formatterNumber.format(quantity1)} ${mainUnitCode}`;
               // console.log("Inside AddToList with lineEdit is " + lineEdit);
                if (lineEdit == 0) {
                   // console.log("Inside lineEdit Adding Line");
                    //#region Add Table Line
                   var detailsTableBody = $("#detailsTable tbody");
                    let prItem = '<tr><td class="small">';
                    prItem += `${materialCounter}`;
                    prItem += '</td><td class="small " ';
                    prItem += `data-materialId=" ${materialId}" `;
                    prItem += `data-factor=" ${factor}" `;
                    prItem += `data-mainUnitId=" ${mainUnitId}" `;
                    prItem += `data-secUnitId=" ${secUnitId}" `;
                    prItem += `data-transUnitId=" ${transUnitId}" `;
                    prItem += `data-transUnitType=" ${transUnitType}" `;
                    prItem += `data-baseUnitPriceNet=" ${baseUnitPriceNet}" `;
                    //prItem += `data-baseUnitPrice=" ${baseUnitPrice}" `;
                    prItem += `data-Q2=" ${quantity2}" `;
                    prItem += `data-transUnitFactor=" ${transUnitFactor}" `;
                    prItem += '>';
                    prItem += `${productName}`;
                    prItem += '</td>';
                    prItem += `<td class="small text-end" data-actualValue="${transQuantity}">${transUnitText}</td>`;
                    prItem += `<td class="small text-end" data-actualValue="${quantity1}">${mainUnitText}</td>`;
                    prItem += `<td class="small text-end currency-input-text" data-actualValue="${priceOnTransUnit}">${formatterCurrency.format(priceOnTransUnit)}</td>`;
                    prItem += `<td class="small text-end" data-actualValue="${discount}">${formatterNumber.format(discount)}</td>`;
                    prItem += `<td class="small text-end" data-actualValue="${vatPercent}">${formatterNumber.format(vatPercent)}</td>`;
                    prItem += `<td class="small text-end currency-input-text" data-actualValue="${netAmount}">${formatterCurrency.format(netAmount)}</td>`;
                    prItem += `<td class="small text-end currency-input-text" data-actualValue="${discountAmount}">${formatterCurrency.format(discountAmount)}</td>`;
                    prItem += `<td class="small text-end currency-input-text" data-actualValue="${fpaAmount}">${formatterCurrency.format(fpaAmount)}</td>`;
                    prItem += `<td class="small text-end currency-input-text" data-actualValue="${grosAmount}">${formatterCurrency.format(grosAmount)}</td>`;
                    prItem += '<td class="small">';
                    prItem += '<a data-itemId="0" href="#" class="modifyItem"><i class="fas fa-edit"></i></a>';
                    prItem += '</td><td class="small">';
                    prItem += '<a data-itemId="0" href="#" class="deleteItem"><i class="fas fa-trash"></i></a>';
                    prItem += '</td></tr>';


                    detailsTableBody.append(prItem);
                    //#endregion
                } else {
                    //console.log("Inside lineEdit Modifying Line");
                    //Μεταβολή γραμμής πίνακα
                    var $tbl = $('#detailsTable');
                    var $rows = $('tr', $tbl);
                    var $row = $rows.eq(lineEdit);

                    var $colMaterial = $('td:eq(1)', $row);
                    var $colTransQ = $('td:eq(2)', $row);
                    var $colQ1 = $('td:eq(3)', $row);
                    var $colTransPrice = $('td:eq(4)', $row);
                    var $colDiscRate = $('td:eq(5)', $row);
                    var $colFpaRate = $('td:eq(6)', $row);
                    var $colNetAmount = $('td:eq(7)', $row);
                    var $colDiscAmount = $('td:eq(8)', $row);
                    var $colFpaAmount = $('td:eq(9)', $row);
                    var $colGrossAmount = $('td:eq(10)', $row);

                    $colMaterial.attr('data-materialId', materialId);
                    $colMaterial.attr('data-mainUnitId', mainUnitId);
                    $colMaterial.attr('data-secUnitId', secUnitId);
                    $colMaterial.attr('data-factor', factor);
                    $colMaterial.attr('data-transUnitId', transUnitId);
                    $colMaterial.attr('data-transUnitType', transUnitType);
                    $colMaterial.attr('data-transUnitFactor', transUnitFactor);
                    $colMaterial.attr('data-baseUnitPriceNet', baseUnitPriceNet);
                    $colMaterial.attr('data-Q2', quantity2);
                    $colMaterial.text(productName);

                    $colTransQ.attr('data-actualValue', transQuantity);
                    $colQ1.attr('data-actualValue', quantity1);

                    $colTransQ.text(transUnitText);
                    $colQ1.text(mainUnitText);

                    $colTransPrice.attr('data-actualValue', priceOnTransUnit);
                    $colDiscRate.attr('data-actualValue', discount);
                    $colFpaRate.attr('data-actualValue', vatPercent);
                    $colNetAmount.attr('data-actualValue', netAmount);
                    $colDiscAmount.attr('data-actualValue', discountAmount);
                    $colFpaAmount.attr('data-actualValue', fpaAmount);
                    $colGrossAmount.attr('data-actualValue', grosAmount);

                    $colDiscRate.text(formatterNumber.format(discount));
                    $colFpaRate.text(formatterNumber.format(vatPercent));

                    $colGrossAmount.text(formatterCurrency.format(grosAmount));
                    $colTransPrice.text(formatterCurrency.format(priceOnTransUnit));
                    $colNetAmount.text(formatterCurrency.format(netAmount));
                    $colDiscAmount.text(formatterCurrency.format(discountAmount));
                    $colFpaAmount.text(formatterCurrency.format(fpaAmount));
                 }

                $lineEditing.val(0);
                clearItem();
                $lookUp.focus();
                updateCounter();

            });

            //After Add A New Order In The List, Clear Clean The Form For Add More Order.
            function clearItem() {
                $lookUp.val('');
                $price.val('');
                $q1.val('');
                $q2.val('');
                                
                $priceNet.val('');
                $lineNetValue.val('');
                $lineVatValue.val('');
                $lineDiscValue.val('');
                $lineBrutValue.val('');
                $lineExpValue.val('');
                                
                $transUnitFactor.val('');
                $factor.val('');
                $transUnitSelector.empty();
                
                discountPercentEl.value = 0;
                vatPercentEl.value = 0;
                priceOnTransUnitEl.value = 0;
                transQuantityEl.value = 0;
                                
            }

            $(document).on('click','a.deleteItem',function(e) {
                e.preventDefault();
                var $self = $(this);
                if ($(this).attr('data-itemId') == "0") {
                    $(this).parents('tr').css("background-color", "#ff6347").fadeOut(800,
                        function() {
                            $(this).remove();
                            updateCounter();
                        });

                }
            });
            $(document).on('click','a.modifyItem',function(e) {
                e.preventDefault();
                var $self = $(this);
                if ($(this).attr('data-itemId') == "0") {
                    var $row = $(this).parents('tr');

                    var $colLine = $('td:eq(0)', $row);
                    var $colMaterial = $('td:eq(1)', $row);
                    var $colTransQ = $('td:eq(2)', $row);
                    var $colQ1 = $('td:eq(3)', $row);
                    var $colTransPrice = $('td:eq(4)', $row);
                    var $colDiscRate = $('td:eq(5)', $row);
                    var $colFpaRate = $('td:eq(6)', $row);
                    var $colNetAmount = $('td:eq(7)', $row);
                    var $colDiscAmount = $('td:eq(8)', $row);
                    var $colFpaAmount = $('td:eq(9)', $row);
                    var $colGrossAmount = $('td:eq(10)', $row);

                    var lineEdit = $colLine.text();
                    var materialId = $colMaterial.attr('data-materialId');
                    var materialName = $colMaterial.text();
                    var mainUnitId = $colMaterial.attr('data-mainUnitId');
                    var secUnitId = $colMaterial.attr('data-secUnitId');
                    var factor = $colMaterial.attr('data-factor');
                    var transUnitId = $colMaterial.attr('data-transUnitId');
                    var transUnitType = $colMaterial.attr('data-transUnitType');
                    var transUnitFactor = $colMaterial.attr('data-transUnitFactor');
                    var baseUnitPriceNet = $colMaterial.attr('data-baseUnitPriceNet');

                    var q2 = $colMaterial.attr('data-Q2');
                    var transQ = $colTransQ.attr('data-actualValue');
                    var q1 = $colQ1.attr('data-actualValue');
                   
                    var t = $colTransPrice.attr('data-actualValue');
                    var t2 = parseFloat(t);
                   // var t1 = parseNumber(t);
                    var transPrice = t2;
                    
                    t = $colFpaRate.attr('data-actualValue');
                    t2 = parseFloat(t);
                    var fpaRate = t2;

                    var discountRate = parseFloat($colDiscRate.attr('data-actualValue'));
                    var lineNetAmount = $colNetAmount.attr('data-actualValue');
                    var lineDiscAmount = $colDiscAmount.attr('data-actualValue');
                    var lineVatAmount = $colFpaAmount.attr('data-actualValue');
                    var lineGrosAmount = $colGrossAmount.attr('data-actualValue');
                    var priceOnBaseUnit = transPrice / transUnitFactor;
                    const $transactorId = $('#ItemVm_TransactorId');
                    let transactorId = $transactorId.val();
                    let companyId = $companyId.val();
                    getProductInfo(materialId, transactorId, companyId, transUnitId)
                        .then((units) => {

                            $lineNetValue.attr('data-actualValue', lineNetAmount);

                            $lineDiscValue.attr('data-actualValue', lineDiscAmount);

                            $lineVatValue.attr('data-actualValue', lineVatAmount);

                            $lineBrutValue.attr('data-actualValue', lineGrosAmount);
                            formatCurrencyLineValueElements();

                            $lineEditing.val(lineEdit);
                            $materialId.val(materialId);
                            $lookUp.val(materialName);
                            transQuantityEl.value = transQ;
                           priceOnTransUnitEl.value = transPrice;
                           vatPercentEl.value = fpaRate;
                           discountPercentEl.value = discountRate;
                            
                            $transUnitId.val(transUnitId);
                            //let fm = Globalize.numberFormatter();
                            $transUnitType.val(transUnitType);
                           
                            $transUnitFactor.val(transUnitFactor);
                            $priceNet.val(baseUnitPriceNet);
                            $q1.val(q1);
                            $q2.val(q2);
                            
                            
                            $mainUnitId.val(mainUnitId);
                            $secUnitId.val(secUnitId);
                            $factor.val(factor);
                            $price.val(priceOnBaseUnit);
                            $lookupValueValid.val('OK');
                        })
                        .catch((error) => {
                            console.log(error);
                        });


                }
            });

            function saveData(data) {
                return $.ajax({
                    contentType: 'application/json; charset=utf-8',

                    dataType: 'json',
                    type: 'POST',
                    url: "/api/materials/MaterialBuyDocUpdate",
                    data: data,
                    headers: {
                        'RequestVerificationToken': securityToken
                    },
                    success: function(result) {
                        toastr.success("Success", "Success");
                        //location.reload();
                        window.location.href = '@Url.Page("Index")';
                    },
                    error: function(e) {
                        var r = e.responseJSON.error;
                        toastr.error(r, "saveData");
                    }
                });
            }

//-----------------
            $("#saveForm").click(function(e) {

                var $form = $('#transForm');
                var f = document.getElementById("transForm");

                e.preventDefault();

                $('#thisForm').prop("disabled", true);

                var linesArr = [];
                linesArr.length = 0;

                $.each($("#detailsTable tbody tr"),
                    function() {
                        linesArr.push({
                            // materialId: $(this).find('td:eq(0)').html(),
                            warehouseItemId: $(this).find('td:eq(1)').attr('data-materialId'),
                            transactionUnitId: $(this).find('td:eq(1)').attr('data-transUnitId'),
                            transactionUnitFactor: $(this).find('td:eq(1)').attr('data-transUnitFactor'),
                            transactionQuantity: $(this).find('td:eq(2)').attr('data-actualValue'),
                            transUnitPrice: $(this).find('td:eq(4)').attr('data-actualValue'),
                            mainUnitId: $(this).find('td:eq(1)').attr('data-mainUnitId'),
                            secUnitId: $(this).find('td:eq(1)').attr('data-secUnitId'),
                            factor: $(this).find('td:eq(1)').attr('data-factor'),
                            q1: $(this).find('td:eq(3)').attr('data-actualValue'),
                            q2: $(this).find('td:eq(1)').attr('data-Q2'),
                            price: $(this).find('td:eq(1)').attr('data-baseUnitPriceNet'),
                            discount: $(this).find('td:eq(5)').attr('data-actualValue'),
                            discountRate: $(this).find('td:eq(5)').attr('data-actualValue'),
                            fpaRate: $(this).find('td:eq(6)').attr('data-actualValue'),
                            vatPercent: $(this).find('td:eq(6)').attr('data-actualValue')

                        });
                    });

                var data = JSON.stringify({
                    id: $("#ItemVm_Id").val(),
                    transDate: $("#ItemVm_TransDate").val(),
                    transRefCode: $("#ItemVm_TransRefCode").val(),
                    transactorId: $("#ItemVm_TransactorId").val(),
                    companyId: $("#ItemVm_CompanyId").val(),
                    paymentMethodId: $("#ItemVm_PaymentMethodId").val(),
                    buyDocSeriesId: $("#ItemVm_BuyDocSeriesId").val(),
                    buyDocTypeId: $("#ItemVm_BuyDocTypeId").val(),
                    sectionId: $("#ItemVm_SectionId").val(),
                    Etiology: $("#ItemVm_Etiology").val(),
                    amountFpa: $("#ItemVm_AmountFpa").attr('data-actualValue'),
                    amountNet: $("#ItemVm_AmountNet").attr('data-actualValue'),
                    amountDiscount: $("#ItemVm_AmountDiscount").attr('data-actualValue'),
                    timestamp: $("#ItemVm_Timestamp").val(),
                    buyDocLines: linesArr

                });
                console.log("Data->" + data);
                $.when(saveData(data))
                    .then(function(response) {
                        console.log(response);
                        $('#thisForm').prop("disabled", false);
                    })
                    .fail(function(err) {
                        console.log(err);
                        $('#thisForm').prop("disabled", false);
                    });
            });
            //-------------
            if ($initialLoad.val()=='True') {
               // console.log("Initial load is true setting initial values");
                updateCounter();
                seriesChanged();
                companyChanged();
                setSeekType();
            }
            //#endregion
            setupAllNumericInputs();
            setupEventManagers();

            $initialLoad.val(false);
        });


    </script>
}