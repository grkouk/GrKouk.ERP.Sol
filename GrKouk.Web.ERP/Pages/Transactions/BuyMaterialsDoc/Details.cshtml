@page
@model DetailsModel

@{
    Layout = "_LayoutEntryFormTransaction";
    ViewData["Title"] = "Προβολή Παραστατικού Αγοράς";
}

@section MyCss
{
    <!--Begin syncfusion integration-->
    <link rel="stylesheet" href="https://cdn.syncfusion.com/ej2/bootstrap4.css" />
    <!--End syncfusion integration-->
    @* <link rel="stylesheet" href="~/css/search-modal.css" /> *@
    @* <link rel="stylesheet" href="~/lib/bootstrap-select/css/bootstrap-select.min.css" /> *@
}

<style>
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        margin: 0;
    }
    .ui-autocomplete-loading {
        background: white url('@Url.Content("~/images/ui-anim_basic_16x16.gif")') right center no-repeat;
    }
    .ui-autocomplete.ui-widget {
        font-family: Verdana,Arial,sans-serif;
        font-size: 12px;
    }
    .input-doc-line {
        font-size: 0.7rem;
    }
    .fill-height {
        line-height:2.8rem;
    }
</style>


<div class="container-xxl">
    <hr />
    <form method="post" id="transForm">
        <fieldset id="thisForm" disabled>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ItemVm.Id" />
            <input type="hidden" asp-for="ItemVm.FiscalPeriodId" />
            <input type="hidden" asp-for="ItemVm.BuyDocTypeId" />
            <input type="hidden" asp-for="ItemVm.SectionId" />
            <input type="hidden" asp-for="ItemVm.Timestamp" />
            @* <input type="hidden" asp-for="@Model.InitialLoad" id="IsInitialLoad"/> *@
            <input type="hidden" id="MaterialId" />
            <input type="hidden" id="MaterialLastPrice" />
            <input type="hidden" id="MaterialFpaId" />
            <input type="hidden" id="MaterialMainUnitId" />
            <input type="hidden" id="MaterialMainUnitCode" />
            <input type="hidden" id="MaterialSecondaryUnitId" />
            <input type="hidden" id="TransactionUnitId" />
            <input type="hidden" id="TransactionUnitCode" />
            <input type="hidden" id="TransactionUnitType" />
            <input type="hidden" id="MaterialsCounter" />
            <input type="hidden" id="SeriesUsedPrice" />
            <input type="hidden" id="LineEditing" />
            <input type="hidden" id="LookupValueValid" />
            <div class="row mb-3">
                <div class="col-md-3 col-lg-2">
                    <div class="form-floating">
                        <input asp-for="ItemVm.TransDate" class="form-control form-control-sm" autofocus />
                        <label asp-for="ItemVm.TransDate" class="form-label small"></label>
                        <span asp-validation-for="ItemVm.TransDate" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6 col-lg-5">
                    <div class="form-floating">
                        <select asp-for="ItemVm.BuyDocSeriesId" class="form-select form-select-sm" asp-items="ViewBag.BuyDocSeriesId"></select>
                        <label asp-for="ItemVm.BuyDocSeriesId" class="form-label small"></label>
                    </div>
                </div>
                <div class="col-md-3 col-lg-3">
                    <div class="form-floating">
                        <input asp-for="ItemVm.TransRefCode" class="form-control form-control-sm" placeholder="Ref Code" />
                        <label asp-for="ItemVm.TransRefCode" class="form-label small"></label>
                        <span asp-validation-for="ItemVm.TransRefCode" class="text-danger"></span>
                    </div>

                </div>
            </div>
            <div class="row mb-3 gx-1 align-items-center">
                <div class="col-md-6">
                    <div class="form-floating">
                        <select asp-for="ItemVm.TransactorId" class="form-select form-select-sm" asp-items="ViewBag.TransactorId"></select>
                        <label asp-for="ItemVm.TransactorId" class="form-label small"></label>

                    </div>
                </div>

                <div class="col-md-2">
                    <div class="form-floating">

                        <select asp-for="ItemVm.CompanyId" class="form-select form-select-sm" asp-items="ViewBag.CompanyId"></select>
                        <label asp-for="ItemVm.CompanyId" class="form-label" small></label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <select asp-for="ItemVm.PaymentMethodId" class="form-select form-select-sm" asp-items="ViewBag.PaymentMethodId"></select>
                        <label asp-for="ItemVm.PaymentMethodId" class="form-label" small></label>
                    </div>
                </div>
            </div>


            <div class="row mb-3 ps-2 pe-2">
                <table id="detailsTable" class="table table-responsive-sm">
                    <thead class="small">
                        <tr>
                            <th class="small" style="width: 0%"> #</th>
                            <th class="small" style="width: 20%">Product</th>
                            <th class="small text-center" style="width: 10%">Q(Trans)</th>
                            <th class="small text-center" style="width: 10%">Q(Base)</th>
                            <th class="small text-center" style="width: 10%">Trans Price</th>
                            <th class="small text-center" style="width: 5%">Disc%</th>
                            <th class="small text-center" style="width: 5%">Vat%</th>
                            <th class="small text-center" style="width: 10%">Net</th>
                            <th class="small text-center" style="width: 10%">Disc</th>
                            <th class="small text-center" style="width: 10%">Vat</th>
                            <th class="small text-center" style="width: 10%">Gross</th>
                            <th class="small" style="width: 1%"></th>
                            <th class="small" style="width: 1%"></th>

                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var lineCount = 0;

                            foreach (var docLine in Model.ItemVm.BuyDocLines)
                            {
                                lineCount++;
                                var materialId = docLine.WarehouseItemId;
                                var transUnitId = docLine.TransactionUnitId;
                                var transQuantity = docLine.TransactionQuantity;
                                var transQuantityActual = FormattableString.Invariant($"{transQuantity}");
                                var transUnitFactor = docLine.TransactionUnitFactor;
                                var q1 = docLine.Quontity1;
                                var q2 = docLine.Quontity2;

                                var transPrice = docLine.TransUnitPrice;
                                var unitPrice = docLine.UnitPrice;
                                var vatRate = docLine.FpaRate;
                                var mainUnitId = docLine.PrimaryUnitId;
                                var secUnitId = docLine.SecondaryUnitId;
                                var factor = docLine.Factor;
                                var materialName = docLine.WarehouseItemName;
                                var disRate = docLine.DiscountRate;
                                var disAmount = docLine.AmountDiscount;
                                var vatAmount = docLine.AmountFpa;
                                var netAmount = docLine.AmountNet;
                                var grosAmount = netAmount - disAmount + vatAmount;
                                var q1Actual = FormattableString.Invariant($"{q1}");
                                var q2Actual = FormattableString.Invariant($"{q2}");
                                var unitPriceActual = FormattableString.Invariant($"{unitPrice}");
                                var vatRateActual = FormattableString.Invariant($"{vatRate}");
                                var factorActual = FormattableString.Invariant($"{factor}");
                                var disRateActual = FormattableString.Invariant($"{disRate}");
                                var disAmountActual = FormattableString.Invariant($"{disAmount}");
                                var vatAmountActual = FormattableString.Invariant($"{vatAmount}");
                                var netAmountActual = FormattableString.Invariant($"{netAmount}");
                                var grosAmountActual = FormattableString.Invariant($"{grosAmount}");
                                var transPriceActual = FormattableString.Invariant($"{transPrice}");
                                var transUnitFactorActual = FormattableString.Invariant($"{transUnitFactor}");
                                var transQuantityText = $@"{transQuantity:N2}";
                                var q1Text = $@"{q1:N2}";
                                var tLine = $"<tr><td class=\"small\"> {lineCount}" +
                                            $"</td><td class=\"small\" data-materialId=\"{materialId}\" " +
                                            $"data-transUnitId=\"{transUnitId}\" data-transUnitFactor=\"{transUnitFactor}\" " +
                                            $"data-Q2=\"{q2Actual}\"  " +
                                            $"data-baseUnitPriceNet=\"{unitPriceActual}\"  " +
                                            $"data-factor=\"{factorActual}\" data-mainUnitId=\"{mainUnitId}\" data-secUnitId=\"{secUnitId}\" " +
                                            $">{materialName} </td><td class=\"small text-end\"  data-actualValue=\"{transQuantityActual}\" >" +
                                            $" {transQuantityText} </td><td class=\"small text-end\"  data-actualValue=\"{q1Actual}\" > " +
                                            $" {q1Text} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{transPriceActual}\" >" +
                                            $" {transPrice} </td><td class=\"small text-end\"  data-actualValue=\"{disRateActual}\" >" +
                                            $"{disRate} </td><td class=\"small text-end\"  data-actualValue=\"{vatRateActual}\" >" +
                                            $"{vatRate} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{netAmountActual}\" >" +
                                            $"{netAmount} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{disAmountActual}\" >" +
                                            $"{disAmount} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{vatAmountActual}\" >" +
                                            $"{vatAmount} </td><td class=\"small text-end currency-input-text\"  data-actualValue=\"{grosAmountActual}\" >" +
                                            $"{grosAmount} </td>" +
                                            $"<td class=\"small\">" +
                                            $"<a data-itemId=\"0\" href=\"#\" class=\"modifyItem\"><i class=\"fas fa-edit\"></i></a></td>" +
                                            $"<td class=\"small\">" +
                                            $"<a data-itemId=\"0\" href=\"#\" class=\"deleteItem\"><i class=\"fas fa-trash\"></i></a></td></tr>";
                                @Html.Raw(tLine)
                                ;
                            }

                        }
                    </tbody>
                </table>
            </div>
            <div class="row mb-3">
                <div class="col-3">
                    <label class=" small">Net Amount</label>
                    <input asp-for="ItemVm.AmountNet" class="form-control form-control-sm text-end currency-input" type="text" disabled />
                    <span asp-validation-for="ItemVm.AmountNet" class="text-danger small"></span>
                </div>


                <div class="col-3">
                    <label class=" small">Discount</label>
                    <input asp-for="ItemVm.AmountDiscount" class="form-control form-control-sm text-end currency-input" type="text" disabled />
                    <span asp-validation-for="ItemVm.AmountDiscount" class="text-danger small"></span>
                </div>
                <div class="col-3">
                    <label class="small">Amount VAT</label>
                    <input asp-for="ItemVm.AmountFpa" class="form-control form-control-sm text-end" type="text currency-input" disabled />
                    <span asp-validation-for="ItemVm.AmountFpa" class="text-danger small"></span>
                </div>
                <div class="col-3">
                    <label class=" small">Sum</label>
                    <input asp-for="ItemVm.AmountSum" type="text" class="form-control form-control-sm text-end currency-input" disabled />

                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="form-floating">
                        <textarea asp-for="ItemVm.Etiology" class="form-control form-control-sm"></textarea>
                        <label asp-for="ItemVm.Etiology" class="form-label small"></label>
                    </div>
                    <span asp-validation-for="ItemVm.Etiology" class="text-danger small"></span>
                </div>
            </div>

        </fieldset>
    </form>


    <a asp-page="./Edit" asp-route-id="@Model.ItemVm.Id">Edit</a> |
    <a asp-page="./Index">Back to List</a>

</div>
@section Scripts
{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script src="~/js/product.lib.js"></script>
    <script>
    $(document).ready(function(){
        var currentCulture = '@System.Globalization.CultureInfo.CurrentCulture';
        console.log('Current Culture ' + currentCulture);

        var formatterCurrency = new Intl.NumberFormat(currentCulture,
            {
                style: 'currency',
                currency: 'EUR',
                minimumFractionDigits: 2
            });
        var formatterNumber = new Intl.NumberFormat(currentCulture,
            {
                maximumFractionDigits: 3

            });
        const $companyId = $('#ItemVm_CompanyId');
        const $docCurrency = $('[name=docCurrency]');
        const $amountSum = $('#DocumentSum');
        const formatCurrencyLineValueElements = () => {
            let $elementsToUpdateVal = $('.currency-input');
            $elementsToUpdateVal.each(function() {
                let $el = $(this);
                let elValue = $el.attr('data-actualValue');
                if (!isNaN(elValue)) {
                    $el.val(formatterCurrency.format(elValue));
                }

            });
        };
        const formatCurrencyTableElements = () => {
            let $elementsToUpdateText = $('.currency-input-text');
            $elementsToUpdateText.each(function () {
                let $el = $(this);
                let elValue = $el.attr('data-actualValue');
                if (!isNaN(elValue)) {
                    $el.text(formatterCurrency.format(elValue));
                }

            });
        };
        const updateCurrencyFormat = () => {
            formatCurrencyLineValueElements();
            formatCurrencyTableElements();
        };
        const companyChanged = () => {
            let companyId = parseInt($companyId.val());
            if (isNaN(companyId)) {
                companyId = 0;
            }
            if (companyId > 0) {
                productLib.setCompanyIdInSession(companyId)
                    .then()
                    .catch((error) => {
                        console.log("Error setting companyId in session ");
                        console.log(error);
                    });
                productLib.getCompanyBaseCurrencyInfo(companyId)
                    .then((data) => {
                        let currencyCode = data.currencyCode;
                        //var currencyLocale = data.currencyLocale;
                        let locale = data.currencyLocale;
                        formatterCurrency = new Intl.NumberFormat(locale,
                            {
                                style: 'currency',
                                currency: currencyCode,
                                minimumFractionDigits: 2
                            });
                        $docCurrency.text(currencyCode);
                        updateCurrencyFormat();
                    })
                    .catch((error) => {
                        console.log("Error getting company base currency");
                        console.log(error);
                    });
            }
        };

        companyChanged();
    });
    </script>
}
