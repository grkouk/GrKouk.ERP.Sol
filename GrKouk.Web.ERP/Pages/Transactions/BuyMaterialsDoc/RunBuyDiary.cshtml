@page
@using GrKouk.Web.ERP.Helpers
@model GrKouk.Web.ERP.Pages.Transactions.BuyMaterialsDoc.RunBuyDiaryModel
@{
    ViewData["Title"] = Model.DiaryName;
}
@section MyCss
    {
    <link rel="stylesheet" href="~/css/custom-checkbox.css" />
    <link rel="stylesheet" href="~/css/searchbar.css" />
}
    <h4>@Model.DiaryName</h4>
    <div class="container ">
        <ul class="nav small justify-content-end">


            <li class="nav-item">
                <a class="nav-link" data-toggle="collapse" href="#filterCollapse" role="button" id="filtersToggle"
               aria-expanded="false" aria-controls="filterCollapse">
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="collapse" href="#" id="rowSelectorsToggle" role="button">

                </a>
            </li>
            <li class="nav-item dropdown " id="SelectedRowsActionsMenu">
                <a class="btn btn-sm btn-outline-secondary dropdown-toggle disabled" role="button"
               id="ddSelectedRowsActions" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Actions</a>
                <div class="dropdown-menu small">

                    <a class="dropdown-item" href="#">Another action</a>
                    <a class="dropdown-item" href="#">Something else here</a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="#">Separated link</a>

                </div>
            </li>
        </ul>
    </div>
    <input type="hidden" asp-for="DiaryId" />
    @await Component.InvokeAsync("IndexFilters", new IndexFiltersToShow { ShowDateFlt = true,ShowDisplaySummaryFlt = true })


    <div class="row mt-1">
        <partial name="_PagerPartial" />
    </div>
    <partial name="_DataTable" />
    <div class="row">
        <partial name="_PagerPartial" />
    </div>
    <br />
    <partial name="_LoadMePartial" />


    <a asp-page="./Index" class="small">Back to List</a>

    @section Scripts
    {
    <script src="~/js/moment.min.js"></script>
    <script src="~/js/definitions.js"></script>
    <script src="~/js/indexPageIIFE.lib.js"></script>
    <script>
        $(document).ready(function() {
            var currentCulture = '@System.Globalization.CultureInfo.CurrentCulture';
            var formatterCurrency = new Intl.NumberFormat(currentCulture,
                {
                    style: 'currency',
                    currency: 'EUR',
                    minimumFractionDigits: 2
                });
            var formatterNumber = new Intl.NumberFormat(currentCulture,
                {
                    maximumFractionDigits: 3

                });
            var currencyListJs = @Html.Raw(Json.Serialize(ViewBag.CurrencyListJs));
            const colDefs = [
                {
                    key: 'transDate',
                    responseKey: 'transDate',
                    actualVal: '',
                    columnFormat: 'd',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'DateSort',
                    sortType: 'numeric',
                    header: 'Date',
                    text: '',
                    headerClass: 'small text-center ',
                    class: 'small',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },
                {
                    key: 'transactorName',
                    responseKey: 'transactorName',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: 'label',
                    grandTotalKey: 'label',
                    totalFormatter: '',
                    sortKey: 'TransactorNameSort',
                    sortType: 'alpha',
                    header: 'Transactor',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },
                {
                    key: 'itemName',
                    responseKey: 'itemName',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: 'label',
                    grandTotalKey: 'label',
                    totalFormatter: '',
                    sortKey: 'WarehouseItemNameSort',
                    sortType: 'alpha',
                    header: 'Item',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },
                {
                    key: 'docSeriesCode',
                    responseKey: 'docSeriesCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'SeriesCodeSort',
                    sortType: 'alpha',
                    header: 'Series',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },
                {
                    key: 'refCode',
                    responseKey: 'refCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: '',
                    sortType: '',
                    header: 'Ref Number',
                    text: '',
                    headerClass: 'small text-center d-none d-md-table-cell',
                    class: 'small d-none d-md-table-cell ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },
                {
                    key: 'totalNetAmount',
                    responseKey: 'totalNetAmount',
                    actualVal: '',
                    columnFormat: 'c',
                    totalKey: 'sumOfNetAmount',
                    grandTotalKey: 'grandSumOfNetAmount',
                    totalFormatter: 'currency',
                    sortKey: '',
                    sortType: '',
                    header: 'Net Amount',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small text-end ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },
                {
                    key: 'totalAmount',
                    responseKey: 'totalAmount',
                    actualVal: '',
                    columnFormat: 'c',
                    totalKey: 'sumOfAmount',
                    grandTotalKey: 'grandSumOfAmount',
                    totalFormatter: 'currency',
                    sortKey: '',
                    sortType: '',
                    header: 'Amount',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small text-end ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },

                {
                    key: 'companyCode',
                    responseKey: 'companyCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'CompanyCodeSort',
                    sortType: 'alpha',
                    header: 'Company',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                }
            ];
            const actionColDefs = [
                {
                    actionType: 'defaultAction2',
                    visibility: 'always',
                    target: '_blank',
                    condition: {},
                    text: 'Edit Prototype',

                    dataAttributes: [
                        {
                            key: 'docid',
                            valueKey: 'docid'
                        }
                    ],
                    icon: '<i class="fas fa-edit fa-lg" style="color:slategray"></i>',
                    uriType: 'funcHref', //funcUrl staticHref, staticUrl
                    urlKeys: [
                        { key: 'id', valueKey: 'id' }
                    ],
                    uriFunc: function(col, valueSource) {
                        let retUri = '';
                        if (valueSource.creatorSectionId > 0) {
                            switch (valueSource.creatorSectionCode) {
                                case "SCNSELLCOMBINED":
                                    retUri = `/transactions/sellmaterialdoc/Edit?id=${valueSource["creatorId"]}`;
                                    break;
                                case "SCNBUYMATTRANS":
                                    retUri = `/transactions/buymaterialsdoc/Edit?id=${valueSource["creatorId"]}`;
                                    break;
                                default:
                            }

                        } else {

                            var itemId = valueSource["id"];
                            retUri = `/transactions/transactortransmng/Edit?id=${itemId}`;
                        }
                        return retUri;
                    },
                    uri: ''
                }
            ];
            const actionColSubDefs = [

            ];
            const actionMobileColDefs = [
                {
                    actionType: 'defaultAction2',
                    visibility: 'always',
                    target: '_blank',
                    condition: {},
                    text: 'Edit Prototype',

                    dataAttributes: [
                        {
                            key: 'docid',
                            valueKey: 'docid'
                        }
                    ],
                    icon: '<i class="fas fa-edit fa-lg" style="color:slategray"></i>',
                    uriType: 'funcHref', //funcUrl staticHref, staticUrl
                    urlKeys: [
                        { key: 'id', valueKey: 'id' }
                    ],
                    uriFunc: function(col, valueSource) {
                        let retUri = '';
                        if (valueSource.creatorSectionId > 0) {
                            switch (valueSource.creatorSectionCode) {
                                case "SCNSELLCOMBINED":
                                    retUri = `/transactions/sellmaterialdoc/Edit?id=${valueSource["creatorId"]}`;
                                    break;
                                case "SCNBUYMATTRANS":
                                    retUri = `/transactions/buymaterialsdoc/Edit?id=${valueSource["creatorId"]}`;
                                    break;
                                default:
                            }

                        } else {

                            var itemId = valueSource["id"];
                            retUri = `/transactions/transactortransmng/Edit?id=${itemId}`;
                        }
                        return retUri;
                    },
                    uri: ''
                }
            ];
            const tableHandlersToRegister = [

            ];
            const pageHandlersToRegister = [
                {
                    selector: '#CurrencySelector',
                    event: 'change',
                    handler: function(event) {
                        currencyChanged();
                        indPgLib.refreshData();
                    }
                },
                {
                    selector: '#ShowSummaryFlt',
                    event: 'change',
                    handler: function(event) {

                        indPgLib.refreshData();
                    }
                }
            ];
            const indexPageDef = {
                uri: '/api/GrKoukInfoApi/GetIndexTblDataTransactorDiary',
                currencyFormatter: formatterCurrency,
                numberFormatter: formatterNumber,
                colDefs: colDefs,
                actionColDefs: actionColDefs,
                actionColSubDefs: actionColSubDefs,
                actionMobileColDefs: actionMobileColDefs,
                tableHandlersToRegister: tableHandlersToRegister,
                pageHandlersToRegister: pageHandlersToRegister,
                afterTableLoad: {
                }
            };

            indPgLib.setIndexPageDefinition(indexPageDef);





            var currencyChanged = () => {
                let curCurrencySelected = parseInt($('#CurrencySelector').val());
                var currencyCode;
                try {
                    let currentCurrency = currencyListJs.find(x => x.id === curCurrencySelected);
                    currencyCode = currentCurrency.code;
                    let locale = currentCurrency.displayLocale;
                    formatterCurrency = new Intl.NumberFormat(locale,
                        {
                            style: 'currency',
                            currency: currencyCode,
                            minimumFractionDigits: 2
                        });
                    indPgLib.setCurrencyFormatter(formatterCurrency);
                } catch (e) {
                    //not found keep old formater or maybe create a default one
                    console.log('Not found currency code for this id');
                }
            };


            var storageItemJs = localStorage.getItem('RunTransactorDiaryIndexView');
            if (storageItemJs === undefined || storageItemJs === null) {
                $('#pageIndex').val(1);
                $('#filtersVisible').val(true);
                $('#rowSelectorsVisible').val(true);

                $('#DatePeriodFilter').val('CURYEAR');
                $('#CompanyFilter').val(0);
                $('#TransactorTypeFilter').val(1);
                $('#WarehouseItemNatureFilter').val(1);
                $('#currentSort').val('datesort:asc');
                $('#ShowSummaryFlt').val(true);
            } else {
                var storageItem = JSON.parse(storageItemJs);
                var filtersValue = storageItem.find(x => x.filterKey === 'filtersVisible').filterValue;

                $('#filtersVisible').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'rowSelectorsVisible').filterValue;
                $('#rowSelectorsVisible').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'dateRangeFilter').filterValue;
                $('#DatePeriodFilter').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'currentSort').filterValue;
                $('#currentSort').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'companyFilter').filterValue;
                $('#CompanyFilter').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'pageSize').filterValue;
                $('#PageSize').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'pageIndex').filterValue;
                $('#pageIndex').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'transactorTypeFilter').filterValue;
                $('#TransactorTypeFilter').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'warehouseItemNatureFilter').filterValue;
                $('#WarehouseItemNatureFilter').val(filtersValue);
                try {
                    filtersValue = storageItem.find(x => x.filterKey === 'currentCurrency').filterValue;
                    $('#CurrencySelector').val(filtersValue);
                } catch (e) {

                }
                try {
                    filtersValue = storageItem.find(x => x.filterKey === 'ShowSummaryFlt').filterValue;
                    $('#ShowSummaryFlt').prop('checked', filtersValue);
                } catch (e) {
                    $('#ShowSummaryFlt').prop('checked', true);
                }
            }
            indPgLib.addPagerElementEventListeners();
            indPgLib.registerPageHandlers();
            //indPgLib.loadSettings('TransactorTransIndexView');
            //----------------

            indPgLib.handleFiltersUi();
            currencyChanged();
            indPgLib.refreshData();
            indPgLib.rowSelectorsUi();
        });

        $(window).on('beforeunload', function(e) {
            //#region CommentOut
            //#region Variables
            var filtersVisible = $('#filterCollapse').hasClass('show');
            var $rowSelectorsColumn = $('th[name=selectAllRowsColumn]');

            var rowSelectorsNotVisible = $rowSelectorsColumn.is(':hidden');
            var rowSelectorsVisible = (rowSelectorsNotVisible) ? false : true;

            var pageSize = $('#PageSize').val();
            var dateRange = $('#DatePeriodFilter').val();
            var currentSort = $('#currentSort').val();
            var companyFilter = $('#CompanyFilter').val();
            var pageIndex = $('#pageIndex').val();
            var transactorTypeFilter = $('#TransactorTypeFilter').val();
            var warehouseItemNatureFilter = $('#WarehouseItemNatureFilter').val();
            var currentCurrency = $('#CurrencySelector').val();
            var showSummaryFlt = $('#ShowSummaryFlt').is(':checked');
            var filtersArr = [];
            //#endregion
            filtersArr.push({
                filterKey: 'filtersVisible',
                filterValue: filtersVisible
            });
            filtersArr.push({
                filterKey: 'rowSelectorsVisible',
                filterValue: rowSelectorsVisible
            });
            filtersArr.push({
                filterKey: 'pageIndex',
                filterValue: pageIndex
            });
            filtersArr.push({
                filterKey: 'pageSize',
                filterValue: pageSize
            });
            filtersArr.push({
                filterKey: 'dateRangeFilter',
                filterValue: dateRange
            });
            filtersArr.push({
                filterKey: 'currentSort',
                filterValue: currentSort
            });
            filtersArr.push({
                filterKey: 'companyFilter',
                filterValue: companyFilter
            });
            filtersArr.push({
                filterKey: 'transactorTypeFilter',
                filterValue: transactorTypeFilter
            });
            filtersArr.push({
                filterKey: 'warehouseItemNatureFilter',
                filterValue: warehouseItemNatureFilter
            });
            filtersArr.push({
                filterKey: 'currentCurrency',
                filterValue: currentCurrency
            });
            filtersArr.push({
                filterKey: 'ShowSummaryFlt',
                filterValue: showSummaryFlt
            });
            var sessionVal = JSON.stringify(filtersArr);

            localStorage.setItem('RunTransactorDiaryIndexView', sessionVal);
            //#endregion

        });
    </script>
}
