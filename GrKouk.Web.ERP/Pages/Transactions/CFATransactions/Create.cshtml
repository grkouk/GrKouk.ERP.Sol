@page
@model CreateModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    Layout = "_LayoutEntryFormTransaction";
    ViewData["Title"] = "Νέα κίνηση Cash Flow Account";
}
<hr />
<div class="container-xxl">
    <form method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="@Model.InitialLoad" id="IsInitialLoad" />
        <input type="hidden" asp-for="@Model.CopyFromId" id="CopyFromId" />
        <input type="hidden" asp-for="@Model.CopyFromTransactorId" id="CopyFromTransactorId" />
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="form-floating">
                    <input asp-for="ItemVm.TransDate" class="form-control form-control-sm" autofocus />
                    <label asp-for="ItemVm.TransDate" class="form-label small"></label>
                    <span asp-validation-for="ItemVm.TransDate" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-floating">
                    <select asp-for="ItemVm.CompanyId" class="form-select form-select-sm" asp-items="ViewBag.CompanyId"></select>
                    <label asp-for="ItemVm.CompanyId" class="form-label small"></label>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-floating">
                    <input asp-for="ItemVm.TransRefCode" class="form-control form-control-sm" placeholder="Ref Code" />
                    <label asp-for="ItemVm.TransRefCode" class="form-label small"></label>
                    <span asp-validation-for="ItemVm.TransRefCode" class="text-danger"></span>
                </div>
            </div>
        </div>
        <div class="row mb-3">


            <div class="col-md-4">
                <div class="form-floating">
                    <select asp-for="ItemVm.CashFlowAccountId" class="form-select form-select-sm" asp-items="ViewBag.CashFlowAccountId"></select>
                    <label asp-for="ItemVm.CashFlowAccountId" class="form-label small"></label>
                    <span asp-validation-for="ItemVm.CashFlowAccountId" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-floating">
                    <select asp-for="ItemVm.DocSeriesId" class="form-select form-select-sm" asp-items="ViewBag.DocSeriesId"></select>
                    <label asp-for="ItemVm.DocSeriesId" class="form-label small"></label>
                </div>
            </div>
            @*<div class="col-md-3">
            <div class="form-floating">
                <select asp-for="ItemVm.FiscalPeriodId" class="form-select form-select-sm" asp-items="ViewBag.FiscalPeriodId" readonly></select>
                <label asp-for="ItemVm.FiscalPeriodId" class="form-label small"></label>
                <span asp-validation-for="ItemVm.FiscalPeriodId" class="text-danger"></span>
                </div>
        </div>*@

        </div>
        <div class="row mb-3">
           
            <div class="col-md-3">
                <div class="form-floating">
                    <input asp-for="ItemVm.Amount" class="form-control form-control-sm currency-input" placeholder="Amount" />
                    <label asp-for="ItemVm.Amount" class="form-label small"></label>
                    <div class="invalid-feedback">
                        <span asp-validation-for="ItemVm.Amount" class="text-danger"></span>
                    </div>
                </div>
            </div>
           
           
        </div>
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="form-floating">
                    <textarea asp-for="ItemVm.Etiology" class="form-control form-control-sm" placeholder="Αιτιολογία Κίνησης"> </textarea>
                    <label asp-for="ItemVm.Etiology" class="form-label small"></label>
                </div>
                <div class="invalid-feedback">
                    <span asp-validation-for="ItemVm.Etiology" class="text-danger"></span>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <input type="submit" value="Create" class="btn btn-primary btn-sm" />
            </div>
        </div>
    </form>
</div>

<div>
    <a class="small" asp-page="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/product.lib.js"></script>
    <script>
        $(document).ready(function () {
            var currentCulture = '@System.Globalization.CultureInfo.CurrentCulture';
            //console.log('Current Culture ' + currentCulture);

            var formatterCurrency = new Intl.NumberFormat(currentCulture,
                {
                    style: 'currency',
                    currency: 'EUR',
                    minimumFractionDigits: 2
                });
            var formatterNumber = new Intl.NumberFormat(currentCulture,
                {
                    maximumFractionDigits: 3

                });
            var $initialLoad = $('#IsInitialLoad');

            //if (!$initialLoad.val()) return;
            const $transDate = $('#ItemVm_TransDate');
            const $amount = $('#ItemVm_Amount');
            const $companyId = $('#ItemVm_CompanyId');
            const $docCurrency = $('[name=docCurrency]');

            var $fiscalPeriod = $('#ItemVm_FiscalPeriodId');
            var fiscalPeriodDom = document.getElementById("ItemVm_FiscalPeriodId");
            const $docSeriesEl=$('#ItemVm_TransTransactorDocSeriesId');
            const $transactorListEl = $('#ItemVm_TransactorId');
            var transactorsListJs = @Html.Raw(Json.Serialize(ViewBag.transactorsListJs));
            var allowedTypesListJs = @Html.Raw(Json.Serialize(ViewBag.docTypeAllowedTransactorTypesListJs));
           
            const formatCurrencyLineValueElements = () => {
                let $elementsToUpdateVal = $('.currency-input');
                $elementsToUpdateVal.each(function() {
                    let $el = $(this);
                    let parse = Globalize.numberParser(); 
                    let elValue = parse($el.val());
                    if (!isNaN(elValue)) {
                        $el.val(formatterCurrency.format(elValue));
                    }

                });
            };
            const updateCurrencyFormat = () => {
                formatCurrencyLineValueElements();
            };

            var transactionDataChanged = () => {
                //console.log("Inside transDate Changed");

                var forDate = $transDate.val();
                
                var finalUri = `/api/materials/FiscalPeriod?forDate=${forDate}`;
                fetch(finalUri)
                    .then(function(response) {
                        if (response.ok) {
                            return response.json();
                        } else {
                            return "-1";
                        }

                    })
                    .then(function(myJson) {
                        
                        if (myJson) {

                            var fiscalPeriodId = myJson.periodId;
                           
                            fiscalPeriodDom.value = fiscalPeriodId;

                        }
                        // $spinner.attr('hidden', true);
                    })
                    .catch((error) => {
                            // $spinner.attr('hidden', true);
                            console.log(error);
                        }
                    );
            };
            const docSeriesChanged=()=>{
               const docSeriesId=$('#ItemVm_DocSeriesId').val();
               //locate inside list selected docseriesid
               let a = allowedTypesListJs.find(o=>o.docSeriesId==docSeriesId);
               if (a){
                   console.log('Found');
                   let allowed = JSON.parse(a.allowedTypes);
                   if (allowed){
                        let  lst = transactorsListJs.filter(function(item){
                                return allowed.indexOf(item.transactorTypeId) !== -1;
                              });
                         $transactorListEl.empty();

                        $.each(lst, function(index, item) {
                            $transactorListEl.append($('<option></option>').attr('value', item.value).text(item.text));
                        });
                   } else {
                     $transactorListEl.empty();

                    $.each(transactorsListJs, function(index, item) {
                        $transactorListEl.append($('<option></option>').attr('value', item.value).text(item.text));
                    });
                   }

               } else {
                   console.log('Not Found');
                   $transactorListEl.empty();

                  $.each(transactorsListJs, function(index, item) {
                      $transactorListEl.append($('<option></option>').attr('value', item.value).text(item.text));
                  });
               }

            };
            const companyChanged = () => {
                let companyId = parseInt($companyId.val());
                if (isNaN(companyId)) {
                    companyId = 0;
                }
                if (companyId>0) {
                   
                    productLib.getCompanyBaseCurrencyInfo(companyId)
                        .then((data) => {
                            let currencyCode = data.currencyCode;
                            //var currencyLocale = data.currencyLocale;
                            let locale = data.currencyLocale;
                            formatterCurrency = new Intl.NumberFormat(locale,
                                {
                                    style: 'currency',
                                    currency: currencyCode,
                                    minimumFractionDigits: 2
                                });
                            $docCurrency.text(currencyCode);
                            updateCurrencyFormat();
                        })
                        .catch((error) => {
                            console.log("Error getting company base currency");
                            console.log(error);
                        });
                }
            };
            $docSeriesEl.change((e)=> {
                console.log(e);
                docSeriesChanged();
            });
            $transDate.change(() => {
                transactionDataChanged();
            });
            $companyId.change(() => {
                companyChanged();
            });
           
            var copyFromId =parseInt( $('#CopyFromId').val());
            let selectTransactor=0;
             if (copyFromId===0) {
               
                $amount.val(0);
                 $('#ItemVm_TransDate').val(new Date().toISOString().slice(0, 10));
                 transactionDataChanged();
            } else {
                  $('#ItemVm_TransDate').val(new Date().toISOString().slice(0, 10));
                  selectTransactor = parseInt($('#CopyFromTransactorId').val());
             }
          
          
            $initialLoad.val(false);
            companyChanged();
            docSeriesChanged();
            if (selectTransactor!==0) {
                $('#ItemVm_TransactorId').val(selectTransactor);
            }
        });


    </script>
}
