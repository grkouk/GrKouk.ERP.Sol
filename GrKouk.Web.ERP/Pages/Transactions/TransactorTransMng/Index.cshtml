@page
@model IndexModel

@{
    ViewData["Title"] = "Transactor Transactions";
}
@section MyCss
    {
    <link rel="stylesheet" href="~/css/custom-checkbox.css" />
    <link rel="stylesheet" href="~/css/searchbar.css" />
}
<h4>Transactor Transactions Index</h4>

<div class="container ">
    <ul class="nav small justify-content-end ">
        <li class="nav-item">
            <a href="#" role="button" class="nav-link" id="CreateNew">Create New</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="collapse" href="#filterCollapse" role="button" id="filtersToggle"
               aria-expanded="false" aria-controls="filterCollapse">
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="collapse" href="#" id="rowSelectorsToggle" role="button">

            </a>
        </li>
        <li class="nav-item dropdown " id="SelectedRowsActionsMenu">
            <a class="nav-link dropdown-toggle disabled" role="button" id="ddSelectedRowsActions" data-toggle="dropdown"
               aria-haspopup="true" aria-expanded="false">Actions</a>
            <div class="dropdown-menu small">
                <a class="dropdown-item" href="#" id="deleteSelectedRows">Delete Selected</a>
                <a class="dropdown-item" href="#">Another action</a>
                <a class="dropdown-item" href="#">Something else here</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#">Separated link</a>

            </div>
        </li>
    </ul>
</div>

<div class="collapse show" id="filterCollapse">
    <form class="form-inline" id="FiltersForm" method="get">
        <input type="hidden" id="filtersVisible" />
        <input type="hidden" id="rowSelectorsVisible" />
        <input type="hidden" id="currentSort" />
        <input type="hidden" id="currentFilter" />
        <input type="hidden" id="totalPages" />
        <input type="hidden" id="totalRecords" />
        <input type="hidden" id="pageIndex" />
        <div class="container">
            <div class="form-row">
                <div class="form-group col-md-auto">
                    <div class="searchbar">
                        <input class="search_input" type="text" name="" placeholder="Search...">
                        <a href="#" class="search_icon"><i class="fas fa-search fa-xs"></i></a>
                    </div>
                </div>

                <div class="form-group col-md-auto">
                    <label class="small"> Period:</label>
                    <select name="DatePeriodFilter" id="DatePeriodFilter" class="form-control form-control-sm small"
                            asp-items="ViewBag.DataFilterValues"></select>
                </div>
                <div class="form-group col-md-auto">
                    <label class="small">Company:</label>
                    <select id="CompanyFilter" class="form-control form-control-sm small"
                            asp-items="ViewBag.CompanyFilter"></select>
                </div>
                <div class="form-group col-md-auto">
                    <label class="small"> Page Size:</label>
                    <select id="PageSize" class="form-control form-control-sm small"
                            asp-items="ViewBag.PageFilterSize"></select>
                </div>
               
                <div class="form-group col-md-auto">
                    <label class="small"> Currency:</label>
                    <select id="CurrencySelector" class="form-control form-control-sm small"
                            asp-items="ViewBag.CurrencySelector"></select>
                </div>
            </div>
        </div>
    </form>
    <div class="row mt-1">
        <div class="col-5">
            <label class="small text-left" name="PagingInfo"> </label>
        </div>
        <div class="col-7">
            <nav aria-label="Page navigation example">
                <ul class="pagination pagination-sm justify-content-end">
                    <li class="page-item ">
                        <a href="#" id="GoToFirst" data-pageraction="GoToFirst" 
                           class="page-link" aria-label="First">
                            @*<span aria-hidden="true">;</span>*@
                            First
                        </a>
                    </li>
                    <li class="page-item ">
                        <a href="#" id="GoToPrevious" data-pageraction="GoToPrevious"
                           class="page-link" aria-label="Previous">
                            @*<span aria-hidden="true">&laquo;</span>*@
                            Previous
                        </a>
                    </li>

                    <li class="page-item ">
                        <a href="#" id="GoToNext" data-pageraction="GoToNext"
                           class="page-link" aria-label="Next">
                            @*<span aria-hidden="true">&raquo;</span>*@
                            Next
                        </a>
                    </li>
                    <li class="page-item  ">
                        <a href="#" id="GoToLast" data-pageraction="GoToLast"
                           class="page-link" aria-label="Last">
                            @*<span aria-hidden="true">;</span>*@
                            Last
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>
<table class="table table-bordered table-sm" id="myTable">
    <thead class="thead-light">

    </thead>
    <tbody>
    </tbody>

</table>

<div class="row">
    <div class="col-5">
        <label class="small" name="PagingInfo"> </label>
    </div>
    <div class="col-7">
        <nav aria-label="Page navigation example">
            <ul class="pagination pagination-sm justify-content-end">
                <li class="page-item ">
                    <a href="#" id="GoToFirst" data-pageraction="GoToFirst" 
                       class="page-link" aria-label="First">
                        @*<span aria-hidden="true">;</span>*@
                        First
                    </a>
                </li>
                <li class="page-item ">
                    <a href="#" id="GoToPrevious" data-pageraction="GoToPrevious"
                       class="page-link" aria-label="Previous">
                        @*<span aria-hidden="true">&laquo;</span>*@
                        Previous
                    </a>
                </li>

                <li class="page-item ">
                    <a href="#" id="GoToNext" data-pageraction="GoToNext"
                       class="page-link" aria-label="Next">
                        @*<span aria-hidden="true">&raquo;</span>*@
                        Next
                    </a>
                </li>
                <li class="page-item  ">
                    <a href="#" id="GoToLast" data-pageraction="GoToLast"
                       class="page-link" aria-label="Last">
                        @*<span aria-hidden="true">;</span>*@
                        Last
                    </a>
                </li>
            </ul>
        </nav>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="loadMe" tabindex="-1" role="dialog" aria-labelledby="loadMeLabel">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="loader"></div>
                <div>
                    <p>Executing request. <br><br><small>Please wait...</small></p>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script src="~/js/moment.min.js"></script>
    <script src="~/js/indexPageIIFE.lib.js"></script>
    <script>
        $(document).ready(function() {
            var currentCulture = '@System.Globalization.CultureInfo.CurrentCulture';
            let baseCulture = '@System.Globalization.CultureInfo.CurrentCulture.';
            var formatterCurrency = new Intl.NumberFormat(currentCulture,
                {
                    style: 'currency',
                    currency: 'EUR',
                    minimumFractionDigits: 2
                });
            var formatterNumber = new Intl.NumberFormat(currentCulture,
                {
                    maximumFractionDigits: 3

                });
            //#region variables
            var $filtersVisible = $('#filtersVisible');
            var $filterCollapse = $('#filterCollapse');

            var $filtersToggle = $('#filtersToggle');
            var $rowSelectorsToggle = $('#rowSelectorsToggle');
            var $rowSelectorsVisible = $('#rowSelectorsVisible');

            var $selectedRowsActionsMenu = $('#SelectedRowsActionsMenu');
            var $selectedRowsActionsLink = $('#ddSelectedRowsActions');
            var $deleteSelectedRowsLink = $('#deleteSelectedRows');
            var $pageIndex = $('#pageIndex');
            var $pageSize = $('#PageSize');
            var $totalPages = $('#totalPages');
            var $totalRecords = $('#totalRecords');
            var currencyListJs = @Html.Raw(Json.Serialize(ViewBag.CurrencyListJs));
            //#endregion
              //#region Index page definition objects
            const colDefs = [
                {
                    key: 'transDate',
                    responseKey: 'transDate',
                    actualVal: '',
                    columnFormat: 'd',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'TransactionDateSort',
                    sortType: 'numeric',
                    header: 'Date',
                    text: '',
                    headerClass: 'small text-center ',
                    class: 'small',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                        
                    }
                },
                {
                    key: 'transactorName',
                    responseKey: 'transactorName',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: 'label',
                    grandTotalKey: 'label',
                    totalFormatter: '',
                    sortKey: 'TransactorNameSort',
                    sortType: 'alpha',
                    header: 'Transactor',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                        isRemoteReference: true,
                        valueKey: 'transactorId',
                        url: '@Url.Page("/mainentities/transactors/details")?id='
                    }
                },
                {
                    key: 'transTransactorDocSeriesCode',
                    responseKey: 'transTransactorDocSeriesCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'SeriesCodeSort',
                    sortType: 'alpha',
                    header: 'Series',
                    text: '',
                    headerClass: 'small text-center d-none d-md-table-cell',
                    class: 'small d-none d-md-table-cell ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                       
                    }
                },
                {
                    key: 'transRefCode',
                    responseKey: 'transRefCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: '',
                    sortType: '',
                    header: 'Ref Number',
                    text: '',
                    headerClass: 'small text-center d-none d-md-table-cell',
                    class: 'small d-none d-md-table-cell ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                       
                    }
                },
                {
                    key: 'sectionCode',
                    responseKey: 'sectionCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'SectionCodeSort',
                    sortType: 'alpha',
                    header: 'Section',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                       
                    }
                },
                {
                    key: 'companyCode',
                    responseKey: 'companyCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'CompanyCodeSort',
                    sortType: 'alpha',
                    header: 'Company',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                       
                    }
                },
                {
                    key: 'debitAmount',
                    responseKey: 'debitAmount',
                    actualVal: '',
                    columnFormat: 'c',
                    totalKey: 'sumOfDebit',
                    grandTotalKey: 'grandSumOfDebit',
                    totalFormatter: 'currency',
                    sortKey: '',
                    sortType: '',
                    header: 'Debit',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small text-right ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                       
                    }
                },
                {
                    key: 'creditAmount',
                    responseKey: 'creditAmount',
                    actualVal: '',
                    columnFormat: 'c',
                    totalKey: 'sumOfCredit',
                    grandTotalKey: 'grandSumOfCredit',
                    totalFormatter: 'currency',
                    sortKey: '',
                    sortType: '',
                    header: 'Credit',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small text-right ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                       
                    }
                }
            ];
            const actionColDefs = [
                {
                    actionType: 'defaultAction',
                    valueKey: 'id',
                    icon: '<i class="fas fa-edit fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Edit")?id='
                },
                {
                    actionType: 'defaultAction',
                    valueKey: 'id',
                    icon: '<i class="fas fa-info-circle fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Details")?id='
                },
                {
                    actionType: 'defaultAction',
                    valueKey: 'id',
                    icon: '<i class="fas fa-trash fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Delete")?id='
                },
                {
                    actionType: 'defaultAction',
                    valueKey: 'id',
                    icon: '<i class="fas fa-clone fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Create")?copyFromId='
                }
            ];
            const actionColSubDefs = [
                {
                    actionType: 'newWindowAction',
                    valueKey: 'transactorId',
                    text:'Καρτέλλα',
                    icon: '<i class="fas fa-clone fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("/mainentities/transactors/Kartela")?transactorId='
                }
            ];
            const actionMobileColDefs = [
                {
                    actionType: 'defaultAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Edit',
                    valueKey: 'id',
                    icon: '<i class="fas fa-edit fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Edit")?id='
                },
                {
                    actionType: 'defaultAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Details',
                    valueKey: 'id',
                    icon: '<i class="fas fa-info-circle fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Details")?id='
                },
                {
                    actionType: 'defaultAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Delete',
                    valueKey: 'id',
                    icon: '<i class="fas fa-trash fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Delete")?id='
                },
                {
                    actionType: 'defaultAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Duplicate',
                    valueKey: 'id',
                    icon: '<i class="fas fa-clone fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Create")?copyFromId='
                },
                {
                    actionType: 'newWindowAction',
                    visibility: 'always',
                    condition: {},
                    valueKey: 'transactorId',
                    text:'Καρτέλλα',
                    icon: '<i class="fas fa-receipt fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("/mainentities/transactors/Kartela")?transactorId='
                }
                
                
            ];
            const tableHandlersToRegister = [
               
               
               
            ];
            const pageHandlersToRegister = [
                {
                    selector:'#CurrencySelector',
                    event:'change',
                    handler: function(event) {
                        currencyChanged();
                        indPgLib.refreshData();
                    }
                }
               
                
            ];
            const indexPageDef = {
                uri: '/api/GrKoukInfoApi/GetIndexTblDataTransactorTrans',
                currencyFormatter: formatterCurrency,
                numberFormatter: formatterNumber,
                colDefs: colDefs,
                actionColDefs: actionColDefs,
                actionColSubDefs: actionColSubDefs,
                actionMobileColDefs: actionMobileColDefs,
                tableHandlersToRegister:tableHandlersToRegister,
                pageHandlersToRegister:pageHandlersToRegister,
                afterTableLoad: {}
            };

            indPgLib.setIndexPageDefinition(indexPageDef);
            //#endregion
           
            var deleteSelectedRows = () => {
                var $rowSelectors = $('input[name=checkTableRow]');
                var selectedRows = $rowSelectors.filter(':checked');
                var idsToDelete = [];
                $.each(selectedRows,
                    function(key, value) {
                        console.log(value);
                        var id = parseInt(value.dataset.itemid);
                        idsToDelete.push(id);
                    });
                if (idsToDelete.length > 0) {
                    var idsJs = JSON.stringify({
                        //ToDo: Change this
                        section: 'SectionCode',
                        ids: idsToDelete
                    });
                    var timeout;

                    $.ajax({
                        contentType: 'application/json; charset=utf-8',

                        dataType: 'json',
                        type: 'POST',
                        data: idsJs,
                        url: "/api/GrkoukInfoApi/DeletesellDoοοcumentsList",
                        beforeSend: function() {
                            if (timeout) {
                                clearTimeout(timeout);
                            }
                            timeout = setTimeout(function() {

                                    $("#loadMe").modal({
                                        backdrop: "static", //remove ability to close modal with click
                                        keyboard: false, //remove option to close with keyboard
                                        show: true //Display loader!
                                    });
                                },
                                1000);

                        },
                        success: function(result) {
                            console.log(result);
                            toastr.success("Delete", result.message);
                            refreshTableData();

                        },
                        complete: function() {
                            if (timeout) {
                                clearTimeout(timeout);
                            }
                            $("#loadMe").modal("hide");
                            setTimeout(function() {
                                    console.log('Checking for open modals');
                                    var isOpen = $('#loadMe').hasClass('show');
                                    if (isOpen) {
                                        console.log('There is an open Modal');
                                        $("#loadMe").modal("hide");
                                    } else {
                                        console.log('No open modal');
                                    }
                                },
                                2000);
                        },
                        error: function(e) {
                            console.log(e);
                            toastr.error("Error", e.responseJSON.error);

                        }
                    });

                }

            };
           
            $deleteSelectedRowsLink.on('click',
                () => {
                    deleteSelectedRows();
                });
            var currencyChanged = () => {
                let curCurrencySelected = parseInt($('#CurrencySelector').val());
                var currencyCode;
                try {
                    let currentCurrency = currencyListJs.find(x => x.id === curCurrencySelected);
                    currencyCode = currentCurrency.code;
                    let locale = currentCurrency.displayLocale;
                    formatterCurrency = new Intl.NumberFormat(locale,
                        {
                            style: 'currency',
                            currency: currencyCode,
                            minimumFractionDigits: 2
                        });
                    indPgLib.setCurrencyFormatter(formatterCurrency);
                } catch (e) {
                    //not found keep old formater or maybe create a default one
                    console.log('Not found currency code for this id');
                }
            };
            indPgLib.addPagerElementEventListeners();
            indPgLib.registerPageHandlers();
            indPgLib.loadSettings('TransactorTransIndexView');
            //----------------
           
            indPgLib.handleFiltersUi();
            currencyChanged();
            indPgLib.refreshData();
            indPgLib.rowSelectorsUi();
           

        });

        $(window).on('beforeunload',
            function(e) {
                indPgLib.saveSettings('TransactorTransIndexView');

            });
    </script>
}
