@page
@model CreateModel
@using Microsoft.Extensions.Configuration
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject IConfiguration Configuration
@{
    Layout = "_LayoutEntryFormTransaction";
    ViewData["Title"] = "Νέα κίνηση συναλλασομένου";
}
@section MyCss
{
    <!--Begin syncfusion integration-->
    <link rel="stylesheet" href="https://cdn.syncfusion.com/ej2/bootstrap5.css" />
    <!--End syncfusion integration-->
}

<hr />
<div class="container">
    <form method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="@Model.InitialLoad" id="IsInitialLoad" />
        <input type="hidden" asp-for="@Model.CopyFromId" id="CopyFromId" />
        <input type="hidden" asp-for="@Model.CopyFromTransactorId" id="CopyFromTransactorId" />
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="form-floating">
                    <input asp-for="ItemVm.TransDate" class="form-control form-control-sm" autofocus />
                    <label asp-for="ItemVm.TransDate" class="form-label small"></label>
                    <span asp-validation-for="ItemVm.TransDate" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-floating">
                    <select asp-for="ItemVm.TransTransactorDocSeriesId" class="form-select form-select-sm" asp-items="ViewBag.TransTransactorDocSeriesId"></select>
                    <label asp-for="ItemVm.TransTransactorDocSeriesId" class="form-label small"></label>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-floating">
                    <input asp-for="ItemVm.TransRefCode" class="form-control form-control-sm" placeholder="Ref Code" />
                    <label asp-for="ItemVm.TransRefCode" class="form-label small"></label>
                    <span asp-validation-for="ItemVm.TransRefCode" class="text-danger"></span>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="form-floating">
                    <select asp-for="ItemVm.TransactorId" class="form-select form-select-sm" asp-items="ViewBag.TransactorId"></select>
                    <label asp-for="ItemVm.TransactorId" class="form-label small"></label>
                    <span asp-validation-for="ItemVm.TransactorId" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-floating">
                    <select asp-for="ItemVm.CfAccountId" class="form-select form-select-sm" asp-items="ViewBag.CfAccountId"></select>
                    <label asp-for="ItemVm.CfAccountId" class="form-label small"></label>
                    <span asp-validation-for="ItemVm.CfAccountId" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-floating">
                    <select asp-for="ItemVm.CompanyId" class="form-select form-select-sm" asp-items="ViewBag.CompanyId"></select>
                    <label asp-for="ItemVm.CompanyId" class="form-label small"></label>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-1">

                <ejs-numerictextbox id="fpaRate" placeholder="VAT Rate" format="p2" showSpinButton="false"
                                    ejs-for="@Model.ItemVm.FpaRate" floatLabelType="Auto"></ejs-numerictextbox>
                <span asp-validation-for="ItemVm.FpaRate" class="text-danger"></span>
            </div>
            <div class="col-md-3">
                <ejs-numerictextbox id="AmountNet" placeholder="Net Amount" format="c2" showSpinButton="false"
                                    ejs-for="@Model.ItemVm.AmountNet" floatLabelType="Auto"></ejs-numerictextbox>
                <div class="invalid-feedback">
                    <span asp-validation-for="ItemVm.AmountNet" class="text-danger"></span>
                </div>

            </div>
            <div class="col-md-2">

                <ejs-numerictextbox id="AmountFpa" placeholder="VAT Amount" format="c2" showSpinButton="false" 
                                    readonly="true" created="onCreate"
                                    
                                    ejs-for="@Model.ItemVm.AmountFpa" floatLabelType="Auto"></ejs-numerictextbox>

                <div class="invalid-feedback">
                    <span asp-validation-for="ItemVm.AmountFpa" class="text-danger"></span>
                </div>

            </div>
            <div class="col-md-2">

                <ejs-numerictextbox id="AmountDiscount" placeholder="Discount Amount" format="c2" showSpinButton="false"
                                    ejs-for="@Model.ItemVm.AmountDiscount" floatLabelType="Auto"></ejs-numerictextbox>

                <div class="invalid-feedback">
                    <span asp-validation-for="ItemVm.AmountDiscount" class="text-danger"></span>
                </div>

            </div>
            <div class="col-md-2">

                <ejs-numerictextbox id="ItemVm_AmountSum" readonly="true" placeholder="Net Amount" format="c2" 
                                    showSpinButton="false" created="onCreate"
                                    ejs-for="@Model.ItemVm.AmountSum" floatLabelType="Auto"></ejs-numerictextbox>


            </div>
        </div>

       
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="form-floating">
                    <textarea asp-for="ItemVm.Etiology" class="form-control form-control-sm" placeholder="Αιτιολογία Κίνησης"> </textarea>
                    <label asp-for="ItemVm.Etiology" class="form-label small"></label>
                </div>
                <div class="invalid-feedback">
                    <span asp-validation-for="ItemVm.Etiology" class="text-danger"></span>
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col">
                <input type="submit" value="Create" class="btn btn-primary btn-sm" />
            </div>
        </div>
    </form>
</div>

<partial name="_LoadMePartial" />

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsStrippedPartial");}
    <!--Begin syncfusion integration-->
    <script>
        //I have to define this function here otherwise there is an error 
        function onCreate() {
            this.element.setAttribute("tabindex", "-1");
        }
    </script>
    <script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js"></script>
    <ejs-scripts></ejs-scripts>
    <!--End syncfusion integration-->
    <script src="~/js/product.lib.js"></script>
    <script>
       
        $(document).ready(function () {
            
            var $transDate = $('#ItemVm_TransDate');
            var amountNetEl = document.getElementById("AmountNet").ej2_instances[0];
            var amountFpaEl = document.getElementById("AmountFpa").ej2_instances[0];
            var amountDicEl = document.getElementById("AmountDiscount").ej2_instances[0];
            var fpaRateEl = document.getElementById("fpaRate").ej2_instances[0];
            var amountSumEl = document.getElementById("ItemVm_AmountSum").ej2_instances[0];
            var $cfAccountId = $('#ItemVm_CfAccountId');
            
            const $docSeriesEl=$('#ItemVm_TransTransactorDocSeriesId');
            const $transactorListEl = $('#ItemVm_TransactorId');
            var transactorsListJs = @Html.Raw(Json.Serialize(ViewBag.transactorsListJs));
            var allowedTypesListJs = @Html.Raw(Json.Serialize(ViewBag.docTypeAllowedTransactorTypesListJs));
            var $companyId = $('#ItemVm_CompanyId');
            var $docCurrency = $('[name=docCurrency]');
            const $spinnerElement = $('#loadMe');
            const $copyFromTransactorId = $('#CopyFromTransactorId');
            var calculateAmounts = () => {
                console.log("Calculate Values called");
                var fpaRate = fpaRateEl.value;
                var amountNet = amountNetEl.value;
                var amountDic = amountDicEl.value;
                var amountForFpa = amountNet - amountDic;
                var amountFpa = amountForFpa * fpaRate;
                amountFpaEl.value=amountFpa;
                amountSumEl.value=amountNet + amountFpa - amountDic;
               
            };

           
            const docSeriesChanged=()=>{
                const docSeriesId=$docSeriesEl.val();
                //locate inside list selected docseriesid
                let a = allowedTypesListJs.find(o=>o.docSeriesId==docSeriesId);
                if (a){
                    //console.log('Found');
                    let allowed = JSON.parse(a.allowedTypes);
                    if (allowed){
                        let  lst = transactorsListJs.filter(function(item){
                            return allowed.indexOf(item.transactorTypeId) !== -1;
                        });
                        $transactorListEl.empty();

                        $.each(lst, function(index, item) {
                            $transactorListEl.append($('<option></option>').attr('value', item.value).text(item.text));
                        });
                    } else {
                        $transactorListEl.empty();
                        $.each(transactorsListJs, function(index, item) {
                            $transactorListEl.append($('<option></option>').attr('value', item.value).text(item.text));
                        });
                    }
                    let cfaId = parseInt( a.defaultCfaId);
                    if (cfaId!==NaN) {
                        $cfAccountId.val(cfaId);
                    }

                } else {
                    console.log('Not Found');
                    $transactorListEl.empty();

                    $.each(transactorsListJs, function(index, item) {
                        $transactorListEl.append($('<option></option>').attr('value', item.value).text(item.text));
                    });
                }

            };
            const companyChanged = () => {
                let companyId = parseInt($companyId.val());
                if (isNaN(companyId)) {
                    companyId = 0;
                }
                if (companyId > 0) {
                   
                    let loader = ej.base.loadCldr;
                    productLib.getCompanyBaseCurrencyInfo(companyId, $spinnerElement)
                        .then((data) => {
                            let currencyCode = data.currencyCode;
                            let locale = data.currencyLocale.substring(0, 2);
                            productLib.setLanguageLocale(locale,currencyCode,loader)
                                .then(() => {
                                    ej.base.setCulture(locale);
                                    ej.base.setCurrencyCode(currencyCode);
                                    $docCurrency.text(currencyCode);
                                })
                                .catch((error) => {
                                    
                                    console.log("Error setting Globalize locale");
                                    console.log(error);
                                });


                        })
                        .catch((error) => {
                            console.log("Error getting company base currency");
                            console.log(error);
                        });
                }
            };
            const setupEventManagers = () => {

               
                fpaRateEl.addEventListener("change",(event) => {
                    calculateAmounts();
                });
                amountNetEl.addEventListener("change", (event) => {
                    calculateAmounts();
                });
                amountDicEl.addEventListener("change", (event) => {
                    calculateAmounts();
                });
                
            };
            $docSeriesEl.change((e)=> {
                //console.log(e);
                docSeriesChanged();
            });
           
            $companyId.change(() => {
                companyChanged();
            });
            var copyFromId =parseInt( $('#CopyFromId').val());
            let selectTransactor=0;
            if (copyFromId===0) {
                fpaRateEl.value=0;
                amountDicEl.value=0;
                amountFpaEl.value=0;
                amountNetEl.value=0;
                $transDate.val(new Date().toISOString().slice(0, 10));

            } else {
                $transDate.val(new Date().toISOString().slice(0, 10));
                selectTransactor = parseInt($copyFromTransactorId.val());
            }
            setupEventManagers();
            docSeriesChanged();
            companyChanged();
            if (selectTransactor!==0) {
                $transactorListEl.val(selectTransactor);
            }
        });


    </script>
}
