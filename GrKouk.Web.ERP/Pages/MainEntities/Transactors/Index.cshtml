@page
@using GrKouk.Web.ERP.Helpers
@model GrKouk.Web.Erp.Pages.MainEntities.Transactors.IndexModel

@{
    ViewData["Title"] = "Transactors List";
}
@section MyCss
{
    <link rel="stylesheet" href="~/css/custom-checkbox.css" />
    <link rel="stylesheet" href="~/css/searchbar.css" />
}
<h4>Συναλλασόμενοι</h4>
<div class="container mb-2">
    <ul class="nav small justify-content-end ">
        <li class="nav-item">
            <a href="#" role="button" class="btn btn-sm btn-outline-secondary " id="CreateNew">Create New</a>

        </li>
        <li class="nav-item">
            <a asp-page="./Isozigio" class="btn btn-sm btn-outline-secondary" role="button">Ισοζύγιο</a>
        </li>

        <li class="nav-item dropdown ">
            <a class="btn btn-sm btn-outline-secondary dropdown-toggle" role="button" id="ddDiarys" data-bs-toggle="dropdown"
               aria-haspopup="true" aria-expanded="false">Ημερολόγια</a>

            <div class="dropdown-menu small " name="diaryDropDownMenu">
                <h6 class="dropdown-header">Σχετικά Ημερολόγια</h6>
                <a class="dropdown-item small diaryLink">
                </a>
            </div>
        </li>
        <li class="nav-item">
            <a class="btn btn-sm btn-outline-secondary" data-bs-toggle="collapse" data-bs-target="#filterCollapse" href="#filterCollapse" role="button" id="filtersToggle"
               aria-expanded="false" aria-controls="filterCollapse">
            </a>
        </li>
        <li class="nav-item">
            <a class="btn btn-sm btn-outline-secondary" data-toggle="collapse" href="#" id="rowSelectorsToggle" role="button">

            </a>
        </li>
        <li class="nav-item dropdown " id="SelectedRowsActionsMenu">
            <a class="btn btn-sm btn-outline-secondary dropdown-toggle disabled" role="button" id="ddSelectedRowsActions" data-bs-toggle="dropdown"
               aria-haspopup="true" aria-expanded="false">Actions</a>
            <div class="dropdown-menu small">

                <a class="dropdown-item" href="#">Another action</a>
                <a class="dropdown-item" href="#">Something else here</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#">Separated link</a>

            </div>
        </li>
    </ul>
</div>

@await Component.InvokeAsync("IndexFilters",new IndexFiltersToShow {ShowTransactorTypeFlt= true,ShowDateFlt = false,ShowCurrencyFlt = false})
  
    


<div class="row mt-1">
    <partial name="_PagerPartial"/>
</div>
<table class="table table-bordered table-sm" id="myTable">
    <thead class="thead-light">

    </thead>
    <tbody>
    </tbody>
</table>
<div class="row">
    <partial name="_PagerPartial" />
</div>

<!-- Modal -->
<div class="modal fade" id="loadMe" tabindex="-1" role="dialog" aria-labelledby="loadMeLabel">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="loader"></div>
                <div>
                    <p>Executing request. <br><br><small>Please wait...</small></p>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/js/definitions.js"></script>
    <script src="~/js/indexPageIIFE.lib.js"></script>
    <script>
        $(document).ready(function() {
            var currentCulture = '@System.Globalization.CultureInfo.CurrentCulture';
            let baseCulture = '@System.Globalization.CultureInfo.CurrentCulture.';
            var formatterCurrency = new Intl.NumberFormat(currentCulture,
                {
                    style: 'currency',
                    currency: 'EUR',
                    minimumFractionDigits: 2
                });
            var formatterNumber = new Intl.NumberFormat(currentCulture,
                {
                    maximumFractionDigits: 3

                });
            //#region variables
            var $filtersToggle = $('#filtersToggle');
            var $deleteSelectedRowsLink = $('#deleteSelectedRows');
           
            //#endregion
            //#region Index page definition objects
            const colDefs = [
                {
                    key: 'code',
                    responseKey: 'code',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'TransactorCodeSort',
                    sortType: 'alpha',
                    header: 'Code',
                    text: '',
                    headerClass: 'small text-center d-none d-md-table-cell',
                    class: 'small d-none d-md-table-cell ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },
                {
                    key: 'name',
                    responseKey: 'name',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'TransactorNameSort',
                    sortType: 'alpha',
                    header: 'Transactor',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                },
                {
                    key: 'email',
                    responseKey: 'email',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: '',
                    sortType: '',
                    header: 'email',
                    text: '',
                    headerClass: 'small text-center d-none d-md-table-cell',
                    class: 'small d-none d-md-table-cell',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {}
                },
                {
                    key: 'transactorTypeCode',
                    responseKey: 'transactorTypeCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: '',
                    sortType: '',
                    header: 'Type',
                    text: '',
                    headerClass: 'small text-center d-none d-md-table-cell',
                    class: 'small d-none d-md-table-cell',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {}
                },
                {
                    key: 'companyCode',
                    responseKey: 'companyCode',
                    actualVal: '',
                    columnFormat: 't',
                    totalKey: '',
                    grandTotalKey: '',
                    totalFormatter: '',
                    sortKey: 'CompanyCodeSort',
                    sortType: 'alpha',
                    header: 'Company',
                    text: '',
                    headerClass: 'small text-center',
                    class: 'small ',
                    classWhenCondition: '',
                    classCondition: {},
                    remoteReference: {
                    }
                }
            ];
            const actionColDefs = [
                {
                    actionType: 'defaultAction',
                    valueKey: 'id',
                    icon: '<i class="fas fa-edit fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Edit")?id='
                },
                {
                    actionType: 'defaultAction',
                    valueKey: 'id',
                    icon: '<i class="fas fa-info-circle fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Details")?id='
                },
                {
                    actionType: 'defaultAction',
                    valueKey: 'id',
                    icon: '<i class="fas fa-trash fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Delete")?id='
                },
                {
                    actionType: 'defaultAction',
                    valueKey: 'id',
                    icon: '<i class="fas fa-clone fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Create")?copyFromId='
                }
            ];
            const actionColSubDefs = [
                {
                    actionType: 'newWindowAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Καρτέλλα',
                    valueKey: 'id',
                    icon: '<i class="fas fa-receipt fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Kartela")?transactorId='
                }
            ];
            const actionMobileColDefs = [
                {
                    actionType: 'defaultAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Edit',
                    valueKey: 'id',
                    icon: '<i class="fas fa-edit fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Edit")?id='
                },
                {
                    actionType: 'defaultAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Details',
                    valueKey: 'id',
                    icon: '<i class="fas fa-info-circle fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Details")?id='
                },
                {
                    actionType: 'defaultAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Delete',
                    valueKey: 'id',
                    icon: '<i class="fas fa-trash fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Delete")?id='
                },
                {
                    actionType: 'defaultAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Duplicate',
                    valueKey: 'id',
                    icon: '<i class="fas fa-clone fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Create")?copyFromId='
                },
                {
                    actionType: 'newWindowAction',
                    visibility: 'always',
                    elementName: '',
                    condition: {},
                    text: 'Καρτέλλα',
                    valueKey: 'id',
                    icon: '<i class="fas fa-receipt fa-lg" style="color:slategray"></i>',
                    url: '@Url.Page("./Kartela")?transactorId='
                }
            ];
            const tableHandlersToRegister = [
                
            ];
            const pageHandlersToRegister = [
                {
                    selector: '#TransactorTypeFilter',
                    event: 'change',
                    handler: function(event) {
                        $('#pageIndex').val(1);
                        indPgLib.refreshData();
                    }
                }
            ];
            const indexPageDef = {
                uri: '/api/GrKoukInfoApi/GetIndexTblDataTransactors',
                currencyFormatter: formatterCurrency,
                numberFormatter: formatterNumber,
                colDefs: colDefs,
                actionColDefs: actionColDefs,
                actionColSubDefs: actionColSubDefs,
                actionMobileColDefs: actionMobileColDefs,
                tableHandlersToRegister: tableHandlersToRegister,
                pageHandlersToRegister: pageHandlersToRegister,
                tableElementId:"myTable",
                indexPageType:definitionsLib.IndexPageTypeEnum.IndexPage,
                afterTableLoad: {
                    callback: function(valueSource) {
                        loadDiaries(valueSource.diaries);
                    }
                }
            };

            indPgLib.setIndexPageDefinition(indexPageDef);
            //#endregion

            var loadDiaries = (availableDiarys) => {
                var $diaryDd = $('[name=diaryDropDownMenu]');
                $('.diaryLink').remove();
                if (availableDiarys === undefined || availableDiarys === null) {
                    return;
                }
                var d = availableDiarys;

                d.forEach(function(item) {
                    var $aLink = $('<a>').addClass('dropdown-item small diaryLink');
                    $aLink.text(item.text);
                    var diaryHRef = '/MainEntities/Transactors/RunDiary';
                    diaryHRef += `?diaryId=${item.value}`;
                    $aLink.attr('href', diaryHRef);
                    $diaryDd.append($aLink);
                });

            };


            var deleteSelectedRows = () => {
                var $rowSelectors = $('input[name=checkTableRow]');
                var selectedRows = $rowSelectors.filter(':checked');
                var idsToDelete = [];
                $.each(selectedRows,
                    function(key, value) {
                        console.log(value);
                        var id = parseInt(value.dataset.itemid);
                        idsToDelete.push(id);
                    });
                if (idsToDelete.length > 0) {
                    var idsJs = JSON.stringify({
                        //ToDo: Change this
                        section: 'SectionCode',
                        ids: idsToDelete
                    });
                    var timeout;

                    $.ajax({
                        contentType: 'application/json; charset=utf-8',

                        dataType: 'json',
                        type: 'POST',
                        data: idsJs,
                        url: "/api/GrkoukInfoApi/DeletesellDodsdcumentsList",
                        beforeSend: function() {
                            if (timeout) {
                                clearTimeout(timeout);
                            }
                            timeout = setTimeout(function() {

                                    $("#loadMe").modal({
                                        backdrop: "static", //remove ability to close modal with click
                                        keyboard: false, //remove option to close with keyboard
                                        show: true //Display loader!
                                    });
                                },
                                1000);

                        },
                        success: function(result) {
                            console.log(result);
                            toastr.success("Delete", result.message);
                            refreshTableData();

                        },
                        complete: function() {
                            if (timeout) {
                                clearTimeout(timeout);
                            }
                            $("#loadMe").modal("hide");
                            setTimeout(function() {
                                    console.log('Checking for open modals');
                                    var isOpen = $('#loadMe').hasClass('show');
                                    if (isOpen) {
                                        console.log('There is an open Modal');
                                        $("#loadMe").modal("hide");
                                    } else {
                                        console.log('No open modal');
                                    }
                                },
                                2000);
                        },
                        error: function(e) {
                            console.log(e);
                            toastr.error("Error", e.responseJSON.error);

                        }
                    });

                }

            };

            $deleteSelectedRowsLink.on('click',
                () => {
                    deleteSelectedRows();
                });

            var storageItemJs = localStorage.getItem('TransactorsIndexView');
            if (storageItemJs === undefined || storageItemJs === null) {
                $('#pageIndex').val(1);
                $('#filtersVisible').val(true);
                $('#rowSelectorsVisible').val(true);
                // $rowSelectorsToggle.text('Hide Row Selectors');
                // $filtersToggle.text('Hide Filters');
                $('#DatePeriodFilter').val('CURMONTH');
                $('#CompanyFilter').val(0);
                $('#TransactorTypeFilter').val(1);
                $('#currentSort').val('transactorname:asc');
            } else {
                var storageItem = JSON.parse(storageItemJs);
                var filtersValue = storageItem.find(x => x.filterKey === 'filtersVisible').filterValue;
                if (filtersValue === true) {
                    $filtersToggle.text('Hide Filters');
                } else {
                    $filtersToggle.text('Show Filters');
                }
                $('#filtersVisible').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'rowSelectorsVisible').filterValue;
                $('#rowSelectorsVisible').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'currentSort').filterValue;
                $('#currentSort').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'companyFilter').filterValue;
                $('#CompanyFilter').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'pageSize').filterValue;
                $('#PageSize').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'pageIndex').filterValue;
                $('#pageIndex').val(filtersValue);
                filtersValue = storageItem.find(x => x.filterKey === 'transactorTypeFilter').filterValue;
                $('#TransactorTypeFilter').val(filtersValue);
            }
           
            indPgLib.addPagerElementEventListeners();
            indPgLib.registerPageHandlers();
           
            indPgLib.handleFiltersUi();
           
            indPgLib.refreshData();
            indPgLib.rowSelectorsUi();
        });

        $(window).on('beforeunload',
            function(e) {
                //#region CommentOut
                //#region Variables
                var filtersVisible = $('#filterCollapse').hasClass('show');
                var $rowSelectorsColumn = $('th[name=selectAllRowsColumn]');

                var rowSelectorsNotVisible = $rowSelectorsColumn.is(':hidden');
                var rowSelectorsVisible = (rowSelectorsNotVisible) ? false : true;

                var pageSize = $('#PageSize').val();
                // var dateRange = $('#DatePeriodFilter').val();
                var currentSort = $('#currentSort').val();
                var companyFilter = $('#CompanyFilter').val();
                var pageIndex = $('#pageIndex').val();
                var transactorTypeFilter = $('#TransactorTypeFilter').val();
                var filtersArr = [];
                //#endregion
                filtersArr.push({
                    filterKey: 'filtersVisible',
                    filterValue: filtersVisible
                });
                filtersArr.push({
                    filterKey: 'rowSelectorsVisible',
                    filterValue: rowSelectorsVisible
                });
                filtersArr.push({
                    filterKey: 'pageIndex',
                    filterValue: pageIndex
                });
                filtersArr.push({
                    filterKey: 'pageSize',
                    filterValue: pageSize
                });

                filtersArr.push({
                    filterKey: 'currentSort',
                    filterValue: currentSort
                });
                filtersArr.push({
                    filterKey: 'companyFilter',
                    filterValue: companyFilter
                });
                filtersArr.push({
                    filterKey: 'transactorTypeFilter',
                    filterValue: transactorTypeFilter
                });


                var sessionVal = JSON.stringify(filtersArr);

                localStorage.setItem('TransactorsIndexView', sessionVal);
                //#endregion

            });
    </script>
}
