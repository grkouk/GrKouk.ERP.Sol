// <auto-generated />
using System;
using GrKouk.Web.ERP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GrKouk.Web.ERP.Data.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20200515124009_one")]
    partial class one
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.BuyDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AutoPayoffWay")
                        .HasColumnType("int");

                    b.Property<int>("BuyDocTypeDefId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("PayoffSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyDocTypeDefId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.ToTable("BuyDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.BuyDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedSectionTypes")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AllowedTransactorTypes")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedWarehouseItemNatures")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("TransTransactorDefId")
                        .HasColumnType("int");

                    b.Property<int?>("TransWarehouseDefId")
                        .HasColumnType("int");

                    b.Property<int>("UsedPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransTransactorDefId");

                    b.HasIndex("TransWarehouseDefId");

                    b.ToTable("BuyDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.FinancialMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("FinancialMovements");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.FpaDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FpaKategories");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.GlobalSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ProductProduceSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialConsumeSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("GlobalSettings");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutoPayoffWay")
                        .HasColumnType("int");

                    b.Property<int>("DaysOverdue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PayoffSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.SalesChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("SalesChannels");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.SellDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AutoPayoffWay")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("PayoffSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("SellDocTypeDefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("SellDocTypeDefId");

                    b.ToTable("SellDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.SellDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedSectionTypes")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AllowedTransactorTypes")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedWarehouseItemNatures")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("TransTransactorDefId")
                        .HasColumnType("int");

                    b.Property<int?>("TransWarehouseDefId")
                        .HasColumnType("int");

                    b.Property<int>("UsedPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransTransactorDefId");

                    b.HasIndex("TransWarehouseDefId");

                    b.ToTable("SellDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransExpenseDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultDocSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryAction")
                        .HasColumnType("int");

                    b.Property<int>("InventoryValueAction")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.ToTable("TransExpenseDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultDocSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialTransAction")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TurnOverTransId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TurnOverTransId");

                    b.ToTable("TransTransactorDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TransTransactorDocTypeDefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransTransactorDocTypeDefId");

                    b.ToTable("TransTransactorDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("TransTransactorDefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransTransactorDefId");

                    b.ToTable("TransTransactorDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultDocSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseInventoryAction")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseInventoryValueAction")
                        .HasColumnType("int");

                    b.Property<int>("FixedAssetInventoryAction")
                        .HasColumnType("int");

                    b.Property<int>("FixedAssetInventoryValueAction")
                        .HasColumnType("int");

                    b.Property<int>("IncomeInventoryAction")
                        .HasColumnType("int");

                    b.Property<int>("IncomeInventoryValueAction")
                        .HasColumnType("int");

                    b.Property<int>("MaterialInventoryAction")
                        .HasColumnType("int");

                    b.Property<int>("MaterialInventoryValueAction")
                        .HasColumnType("int");

                    b.Property<int>("MaterialInvoicedValueAction")
                        .HasColumnType("int");

                    b.Property<int>("MaterialInvoicedVolumeAction")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("RawMaterialInventoryAction")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialInventoryValueAction")
                        .HasColumnType("int");

                    b.Property<int>("ServiceInventoryAction")
                        .HasColumnType("int");

                    b.Property<int>("ServiceInventoryValueAction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.ToTable("TransWarehouseDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TransWarehouseDocTypeDefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransWarehouseDocTypeDefId");

                    b.ToTable("TransWarehouseDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("TransWarehouseDefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransWarehouseDefId");

                    b.ToTable("TransWarehouseDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.MediaEntities.MediaEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MediaFile")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MediaEntries");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.MediaEntities.ProductMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MediaEntryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaEntryId");

                    b.HasIndex("ProductId", "MediaEntryId")
                        .IsUnique();

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.RecurringTransactions.RecurringTransDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DocSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("NextTransDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("RecurringDocType")
                        .HasColumnType("int");

                    b.Property<string>("RecurringFrequency")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TransRefCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NextTransDate");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactorId");

                    b.ToTable("RecurringTransDocs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.RecurringTransactions.RecurringTransDocLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<float>("Factor")
                        .HasColumnType("real");

                    b.Property<decimal>("FpaRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrimaryUnitId")
                        .HasColumnType("int");

                    b.Property<double>("Quontity1")
                        .HasColumnType("float");

                    b.Property<double>("Quontity2")
                        .HasColumnType("float");

                    b.Property<int>("RecurringTransDocId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitExpenses")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecurringTransDocId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("RecurringTransDocLines");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.AppSetting", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Code");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.BuyDocLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("BuyDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("BuyDocumentId1")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<float>("Factor")
                        .HasColumnType("real");

                    b.Property<decimal>("FpaRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrimaryUnitId")
                        .HasColumnType("int");

                    b.Property<double>("Quontity1")
                        .HasColumnType("float");

                    b.Property<double>("Quontity2")
                        .HasColumnType("float");

                    b.Property<int>("SecondaryUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitExpenses")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyDocumentId");

                    b.HasIndex("BuyDocumentId1");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("BuyDocLines");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.BuyDocTransPaymentMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountUsed")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("BuyDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("TransactorTransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactorTransactionId");

                    b.HasIndex("BuyDocumentId", "TransactorTransactionId")
                        .IsUnique();

                    b.ToTable("BuyDocTransPaymentMappings");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.BuyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("BuyDocSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("BuyDocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransRefCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyDocSeriesId");

                    b.HasIndex("BuyDocTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransactorId");

                    b.ToTable("BuyDocuments");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.CashRegCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CashRegCategories");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.ClientProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CompanyId");

                    b.ToTable("ClientProfiles");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.CostCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CostCentres");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.CrCatWarehouseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CashRegCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ClientProfileId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashRegCategoryId");

                    b.HasIndex("WarehouseItemId");

                    b.HasIndex("ClientProfileId", "CashRegCategoryId", "WarehouseItemId")
                        .IsUnique();

                    b.ToTable("CrCatWarehouseItems");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("DisplayLocale")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.DiaryDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiaryType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedDocTypes")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SelectedMatNatures")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SelectedTransTypes")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("DiaryDefs");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ClosingDate");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.FinDiaryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CostCentreId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FinTransCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RevenueCentreId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCentreId");

                    b.HasIndex("FinTransCategoryId");

                    b.HasIndex("RevenueCentreId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactorId");

                    b.ToTable("FinDiaryTransactions");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.FinTransCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("FinTransCategories");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.FiscalPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("FiscalPeriods");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.MaterialCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("MaterialCategories");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.ProductRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<float>("Factor")
                        .HasColumnType("real");

                    b.Property<int>("PrimaryUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity1")
                        .HasColumnType("float");

                    b.Property<double>("Quantity2")
                        .HasColumnType("float");

                    b.Property<int>("SecondaryUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductRecipes");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.ProductRecipeLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<float>("Factor")
                        .HasColumnType("real");

                    b.Property<int>("PrimaryUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductRecipeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductRecipeId1")
                        .HasColumnType("int");

                    b.Property<double>("Quantity1")
                        .HasColumnType("float");

                    b.Property<double>("Quantity2")
                        .HasColumnType("float");

                    b.Property<int>("SecondaryUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductRecipeId");

                    b.HasIndex("ProductRecipeId1");

                    b.ToTable("ProductRecipeLines");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.RevenueCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RevenueCentres");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.SellDocLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<float>("Factor")
                        .HasColumnType("real");

                    b.Property<decimal>("FpaRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PrimaryUnitId")
                        .HasColumnType("int");

                    b.Property<double>("Quontity1")
                        .HasColumnType("float");

                    b.Property<double>("Quontity2")
                        .HasColumnType("float");

                    b.Property<int>("SecondaryUnitId")
                        .HasColumnType("int");

                    b.Property<int>("SellDocumentId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellDocumentId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("SellDocLines");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.SellDocTransPaymentMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountUsed")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("SellDocumentId")
                        .HasColumnType("int");

                    b.Property<int>("TransactorTransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactorTransactionId");

                    b.HasIndex("SellDocumentId", "TransactorTransactionId")
                        .IsUnique();

                    b.ToTable("SellDocTransPaymentMappings");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.SellDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("SalesChannelId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("SellDocSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("SellDocTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransRefCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SalesChannelId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SellDocSeriesId");

                    b.HasIndex("SellDocTypeId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransactorId");

                    b.ToTable("SellDocuments");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.Transactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneFax")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneWork")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TransactorTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Zip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("TransactorTypeId");

                    b.ToTable("Transactors");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.TransactorCompanyMapping", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("TransactorId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "TransactorId");

                    b.HasIndex("TransactorId");

                    b.ToTable("TransactorCompanyMappings");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.TransactorTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FinancialAction")
                        .HasColumnType("int");

                    b.Property<int>("FiscalPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("FpaRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TransFpaAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TransNetAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("TransRefCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransTransactorDocSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("TransTransactorDocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TransactorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransTransactorDocSeriesId");

                    b.HasIndex("TransTransactorDocTypeId");

                    b.HasIndex("TransactorId");

                    b.ToTable("TransactorTransactions");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.TransactorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TransactorTypes");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.WarehouseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("BuyMeasureUnitId")
                        .HasColumnType("int");

                    b.Property<double>("BuyUnitToMainRate")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FpaDefId")
                        .HasColumnType("int");

                    b.Property<int>("MainMeasureUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MaterialCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("PriceBrutto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceNetto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SecondaryMeasureUnitId")
                        .HasColumnType("int");

                    b.Property<double>("SecondaryUnitToMainRate")
                        .HasColumnType("float");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("WarehouseItemNature")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyMeasureUnitId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FpaDefId");

                    b.HasIndex("MainMeasureUnitId");

                    b.HasIndex("MaterialCategoryId");

                    b.HasIndex("SecondaryMeasureUnitId");

                    b.ToTable("WarehouseItems");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.WarehouseTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Etiology")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("FpaRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InventoryAction")
                        .HasColumnType("int");

                    b.Property<int>("InventoryValueAction")
                        .HasColumnType("int");

                    b.Property<int>("InvoicedValueAction")
                        .HasColumnType("int");

                    b.Property<int>("InvoicedVolumeAction")
                        .HasColumnType("int");

                    b.Property<int>("PrimaryUnitId")
                        .HasColumnType("int");

                    b.Property<double>("Quontity1")
                        .HasColumnType("float");

                    b.Property<double>("Quontity2")
                        .HasColumnType("float");

                    b.Property<int>("SecondaryUnitId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TransFpaAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TransNetAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TransQ1")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TransQ2")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("TransRefCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransWarehouseDocSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("TransWarehouseDocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitExpenses")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("UnitFactor")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransWarehouseDocSeriesId");

                    b.HasIndex("TransWarehouseDocTypeId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("WarehouseTransactions");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.WrItemCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyCodeUsedUnit")
                        .HasColumnType("int");

                    b.Property<double>("BuyRateToMainUnit")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("CodeType")
                        .HasColumnType("int");

                    b.Property<int>("CodeUsedUnit")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("RateToMainUnit")
                        .HasColumnType("float");

                    b.Property<int>("SellCodeUsedUnit")
                        .HasColumnType("int");

                    b.Property<double>("SellRateToMainUnit")
                        .HasColumnType("float");

                    b.Property<int>("TransactorId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("WarehouseItemId");

                    b.HasIndex("CompanyId", "CodeType", "WarehouseItemId", "TransactorId", "Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("WrItemCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.BuyDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.BuyDocTypeDef", "BuyDocTypeDef")
                        .WithMany()
                        .HasForeignKey("BuyDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.BuyDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDef", "TransTransactorDef")
                        .WithMany()
                        .HasForeignKey("TransTransactorDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDef", "TransWarehouseDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.GlobalSettings", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.SellDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.SellDocTypeDef", "SellDocTypeDef")
                        .WithMany()
                        .HasForeignKey("SellDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.SellDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDef", "TransTransactorDef")
                        .WithMany()
                        .HasForeignKey("TransTransactorDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDef", "TransWarehouseDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransExpenseDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.FinancialMovement", "TurnOverTrans")
                        .WithMany()
                        .HasForeignKey("TurnOverTransId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDocTypeDef", "TransTransactorDocTypeDef")
                        .WithMany()
                        .HasForeignKey("TransTransactorDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDef", "TransTransactorDef")
                        .WithMany()
                        .HasForeignKey("TransTransactorDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDocTypeDef", "TransWarehouseDocTypeDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDef", "TransWarehouseDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.MediaEntities.ProductMedia", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.MediaEntities.MediaEntry", "MediaEntry")
                        .WithMany()
                        .HasForeignKey("MediaEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.RecurringTransactions.RecurringTransDoc", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.RecurringTransactions.RecurringTransDocLine", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.RecurringTransactions.RecurringTransDoc", "RecurringTransDoc")
                        .WithMany("DocLines")
                        .HasForeignKey("RecurringTransDocId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.BuyDocLine", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.BuyDocument", "BuyDocument")
                        .WithMany()
                        .HasForeignKey("BuyDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.BuyDocument", null)
                        .WithMany("BuyDocLines")
                        .HasForeignKey("BuyDocumentId1");

                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.BuyDocTransPaymentMapping", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.BuyDocument", "BuyDocument")
                        .WithMany("PaymentMappings")
                        .HasForeignKey("BuyDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.TransactorTransaction", "TransactorTransaction")
                        .WithMany()
                        .HasForeignKey("TransactorTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.BuyDocument", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.BuyDocSeriesDef", "BuyDocSeries")
                        .WithMany()
                        .HasForeignKey("BuyDocSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.BuyDocTypeDef", "BuyDocType")
                        .WithMany()
                        .HasForeignKey("BuyDocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.ClientProfile", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.Company", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.CrCatWarehouseItem", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.CashRegCategory", "CashRegCategory")
                        .WithMany()
                        .HasForeignKey("CashRegCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.ClientProfile", "ClientProfile")
                        .WithMany()
                        .HasForeignKey("ClientProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.ExchangeRate", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Currency", "Currency")
                        .WithMany("Rates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.FinDiaryTransaction", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.CostCentre", "CostCentre")
                        .WithMany()
                        .HasForeignKey("CostCentreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.FinTransCategory", "FinTransCategory")
                        .WithMany()
                        .HasForeignKey("FinTransCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.RevenueCentre", "RevenueCentre")
                        .WithMany()
                        .HasForeignKey("RevenueCentreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.ProductRecipe", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.ProductRecipeLine", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.ProductRecipe", "ProductRecipe")
                        .WithMany()
                        .HasForeignKey("ProductRecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.ProductRecipe", null)
                        .WithMany("ProductRecipeLines")
                        .HasForeignKey("ProductRecipeId1");
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.SellDocLine", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.SellDocument", "SellDocument")
                        .WithMany("SellDocLines")
                        .HasForeignKey("SellDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.SellDocTransPaymentMapping", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.SellDocument", "SellDocument")
                        .WithMany("PaymentMappings")
                        .HasForeignKey("SellDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.TransactorTransaction", "TransactorTransaction")
                        .WithMany()
                        .HasForeignKey("TransactorTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.SellDocument", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.SalesChannel", "SalesChannel")
                        .WithMany()
                        .HasForeignKey("SalesChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.SellDocSeriesDef", "SellDocSeries")
                        .WithMany()
                        .HasForeignKey("SellDocSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.SellDocTypeDef", "SellDocType")
                        .WithMany()
                        .HasForeignKey("SellDocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.Transactor", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.TransactorType", "TransactorType")
                        .WithMany()
                        .HasForeignKey("TransactorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.TransactorCompanyMapping", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany("TransactorCompanyMappings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Transactor", "Transactor")
                        .WithMany("TransactorCompanyMappings")
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.TransactorTransaction", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDocSeriesDef", "TransTransactorDocSeries")
                        .WithMany()
                        .HasForeignKey("TransTransactorDocSeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransTransactorDocTypeDef", "TransTransactorDocType")
                        .WithMany()
                        .HasForeignKey("TransTransactorDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.WarehouseItem", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.MeasureUnit", "BuyMeasureUnit")
                        .WithMany()
                        .HasForeignKey("BuyMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.FpaDef", "FpaDef")
                        .WithMany()
                        .HasForeignKey("FpaDefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.MeasureUnit", "MainMeasureUnit")
                        .WithMany()
                        .HasForeignKey("MainMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.MaterialCategory", "MaterialCaterory")
                        .WithMany()
                        .HasForeignKey("MaterialCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.MeasureUnit", "SecondaryMeasureUnit")
                        .WithMany()
                        .HasForeignKey("SecondaryMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.WarehouseTransaction", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDocSeriesDef", "TransWarehouseDocSeries")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocSeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.DocDefinitions.TransWarehouseDocTypeDef", "TransWarehouseDocType")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrKouk.Erp.Domain.Shared.WrItemCode", b =>
                {
                    b.HasOne("GrKouk.Erp.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany("WarehouseItemCodes")
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
